summary(sub)
sub %>% count(key_mode, sort = TRUE) %>% head(5) %>% kable()
yo <- get_artist_audio_features('Queen')
sub <- select(yo, c('energy','danceability','key_mode','loudness'))
summary(sub)
sub %>% count(key_mode, sort = TRUE) %>% head(5) %>% kable()
yo <- get_artist_audio_features('red hot chili peppers')
sub <- select(yo, c('energy','danceability','key_mode','loudness'))
summary(sub)
sub %>% count(key_mode, sort = TRUE) %>% head(5) %>% kable()
yo <- get_artist_audio_features('Iron Maiden')
sub <- select(yo, c('energy','danceability','key_mode','loudness'))
summary(sub)
sub %>% count(key_mode, sort = TRUE) %>% head(5) %>% kable()
yo <- get_artist_audio_features('Metallica')
sub <- select(yo, c('energy','danceability','key_mode','loudness'))
summary(sub)
sub %>% count(key_mode, sort = TRUE) %>% head(5) %>% kable()
yo <- get_artist_audio_features('Sepultura')
sub <- select(yo, c('energy','danceability','key_mode','loudness'))
summary(sub)
sub %>% count(key_mode, sort = TRUE) %>% head(5) %>% kable()
get_user_audio_features()
?get_user_audio_features()
u <- get_user_audio_features(username = 'ez74nswjvds93w2btv59sqwb4')
#conseguir token de la api
Sys.setenv(SPOTIFY_CLIENT_ID = '44855249207d40619183b073132a6407')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2296850888224ff0bb4e35ad23962578')
access_token <- get_spotify_access_token()
#prueba 1: te saca en orden las escalas mas usadas del artista
yo <- get_artist_audio_features('Sepultura')
sub <- select(yo, c('energy','danceability','key_mode','loudness'))
summary(sub)
sub %>% count(key_mode, sort = TRUE) %>% head(5) %>% kable()
u <- get_user_audio_features(username = 'ez74nswjvds93w2btv59sqwb4')
u <- get_user_audio_features(username = 'ez74nswjvds93w2btv59sqwb4')
?get_user_playlists
u <- get_user_playlists('ez74nswjvds93w2btv59sqwb4')
?get_my_top_artists_or_tracks
get_my_playlists()
Sys.setenv(SPOTIFY_CLIENT_ID = '44855249207d40619183b073132a6407')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2296850888224ff0bb4e35ad23962578')
access_token <- get_spotify_access_token()
get_my_playlists()
get_my_playlists()
u <- get_user_playlists('ez74nswjvds93w2btv59sqwb4')
u <- get_user_playlists('ez74nswjvds93w2btv59sqwb4')
#cargar paquetes
source("01_setup.R")
#Quiero leer el archivo de datos primero
dataset<-'data/artificial/aggregation.arff'
X<-read.arff(dataset)
summary(X)#variables que tienen los datos
#Elijo un numero de clusters (voy a coger directamente el numero de clases que dan los datos)
k<-nlevels(X$class)
k
#Hago partición kmeans y kmea++
source("11_km-kmpp.R")
#Hago partición para el jerarquico
source("10_hclust.R")
method<-'single' #metodos: complete, single, average, centroids
X <- h_clustering(X,method)
install.packages('factoextra')
library('factoextra')
?fviz_dend
X
#pruebas de dendrogramas mas bonitos
#necesito el objeto hclust directamente, no me vale X
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
fviz_dend(x = C_h,k = k)
fviz_dend(x = C_h,k = k, rect = TRUE)
fviz_dend(x = C_h,k = k, rect = TRUE, horiz = TRUE)
fviz_dend(x = C_h,k = k, labels_track_height = 1, rect = TRUE)
fviz_dend(x = C_h,k = k, labels_track_height = 10, rect = TRUE)
fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE)
#solucion del jerarquico
plot_h <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = hc))
plot_h
method<-'complete' #metodos: complete, single, average, centroids
X <- h_clustering(X,method)
#solucion del jerarquico
plot_h <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = hc))
plot_h
#pruebas de dendrogramas mas bonitos
#necesito el objeto hclust directamente, no me vale X
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE)
dend <- fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE)
grid.arrange(plot_h,dend,ncol=2)
dataset<-'data/artificial/3-spiral.arff'
X<-read.arff(dataset)
X<-read.arff(dataset)
k<-nlevels(X$class)
k
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
#dendrograma
dend <- fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE)
source("01_setup.R")
dataset<-'data/artificial/3-spiral.arff'
X<-read.arff(dataset)
k<-nlevels(X$class)
k
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
#dendrograma
dend <- fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE,xlab = element_blank(),ylab = element_blank()) +
partition_h<-cutree(C_h,k)
source("01_setup.R")
dataset<-'data/artificial/3-spiral.arff'
X<-read.arff(dataset)
k<-nlevels(X$class)
k
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
#dendrograma
dend <- fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE)
partition_h<-cutree(C_h,k)
X <- mutate(X, hc = factor(partition_h))
plot_h <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = hc)) +
labs(title = "Partición para k = 3", colour = "Clusters") + theme(axis.title = element_blank())
plot_real <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = class)) + labs(title = "Real Data Distribution", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
grid.arrange(plot_h,dend,plot_real,ncol = 3, main ='Clustering Jerárquico para un k conocido con su dendrograma asociado')
grid.arrange(plot_h,dend,plot_real,ncol = 3, top ='Clustering Jerárquico para un k conocido con su dendrograma asociado')
source("01_setup.R")
dataset<-'data/artificial/DS-850.arff'
X<-read.arff(dataset)
k<-nlevels(X$class)
k
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
#dendrograma
dend <- fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE)
summary(x)
summary(X)
source("01_setup.R")
dataset<-'data/artificial/DS-850.arff'
X<-read.arff(dataset)
k<-nlevels(X$CLASS)
k
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
#dendrograma
dend <- fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE)
partition_h<-cutree(C_h,k)
X <- mutate(X, hc = factor(partition_h))
plot_h <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = hc)) +
labs(title = "Partición para k = 3", colour = "Clusters") + theme(axis.title = element_blank())
plot_real <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = CLASS)) + labs(title = "Real Data Distribution", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
grid.arrange(plot_h,dend,plot_real,ncol = 3, top ='Clustering Jerárquico para un k conocido con su dendrograma asociado')
source("01_setup.R")
dataset<-'data/artificial/aggregation.arff'
X<-read.arff(dataset)
k<-nlevels(X$class)
k
method <- 'complete'
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
#dendrograma
dend <- fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE)
partition_h<-cutree(C_h,k)
X <- mutate(X, hc = factor(partition_h))
plot_h <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = hc)) +
labs(title = "Partición para k = 7", colour = "Clusters") + theme(axis.title = element_blank())
plot_real <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = class)) + labs(title = "Real Data Distribution", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
grid.arrange(plot_h,dend,plot_real,ncol = 3, top ='Clustering Jerárquico para un k conocido con su dendrograma asociado')
grid.arrange(plot_h,dend,plot_real,ncol = 3, top ='Clustering Jerárquico para un k conocido con su dendrograma asociado')
source('01_setup.R')
#paquete para la api de spoti
library('spotifyr')
#conseguir token de la api
Sys.setenv(SPOTIFY_CLIENT_ID = '44855249207d40619183b073132a6407')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2296850888224ff0bb4e35ad23962578')
access_token <- get_spotify_access_token()
aut <- get_spotify_authorization_code()
plist1 <- get_playlist_audio_features(playlist_uris = '37i9dQZF1E37k7BOils0mb')
plist2 <- get_playlist_audio_features(playlist_uris = '37i9dQZF1E3920mzHHtk0B')
plist3 <- get_playlist_audio_features(playlist_uris = '37i9dQZF1E38JwgfTAgiXb')
plist4 <- get_playlist_audio_features(playlist_uris = '37i9dQZF1E357mYJL8BeUV')
plist5 <- get_playlist_audio_features(playlist_uris = '37i9dQZF1E37MgbROqdOgm')
plist6 <- get_playlist_audio_features(playlist_uris = '37i9dQZF1E37MgbROqdOgm')
plist <- rbind(plist1,plist2,plist3,plist4,plist5,plist6)
#veo que variables tengo
names(plist)
plist$track.type
#veo que variables tengo
names(plist)
?get_track_audio_features
track1 <- get_track_audio_features(plist$track.id[1])
track1
track1 <- get_track_audio_analysis(plist$track.id[1])
track1
names(track1)
?get_track
track1 <- get_track(plist$track.id[1])
track1
names(track1)
track1$type
?get_track
#Intento de primer proyecto con spoti
#La idea es tomar una gran cantidad de datos, con genero de cancion, playlist o usuario del que toma el track
#y crear samples de esa poblacion para comparar la efectividad de los algoritmos de clustering en ejemplos reales
#NOTA: abajo del todo hay una prueba con mis playlist
source('01_setup.R')
#paquete para la api de spoti
library('spotifyr')
#conseguir token de la api
Sys.setenv(SPOTIFY_CLIENT_ID = '44855249207d40619183b073132a6407')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2296850888224ff0bb4e35ad23962578')
access_token <- get_spotify_access_token()
aut <- get_spotify_authorization_code()
track1 <- get_track(plist$track.id[1])
?get_track
track1
track1 <- get_track_audio_analysis(plist$track.id[1])
track1
names(track1)
track1$track
names(track1)
track1$beats
track1 <- get_track_audio_features(plist$track.id[1])
track1
names(track1)
names(plist)
track1 <- get_tracks(plist$track.id[1])
track1
names(track1)
?get_artist
#creo que solo da genero a los artistas, no a los tracks
#rhcp 0L8ExT028jH3ddEcZwqJJ5
#mandragora 2AasvmwafZPTgQANaoLoQY
#trueno 2x7PC78TmgqpEIjaGAZ0Oz
arti <- get_artist('0L8ExT028jH3ddEcZwqJJ5')
names(arti)
arti$genres
#efectivamente, solo da genero a los artistas.
#Voy a suponer que cada artista hace un mismo genero y todas las canciones de un artista son mismo genero
plist$track.artists
#efectivamente, solo da genero a los artistas.
#Voy a suponer que cada artista hace un mismo genero y todas las canciones de un artista son mismo genero
plist$track.album.artists
names(plist)
#efectivamente, solo da genero a los artistas.
#Voy a suponer que cada art
#genero unos datos para cad track y sacar de ahi el artista
track <- get_track_audio_analysis(plist$track.id)
track <- get_track_audio_features(plist$track.id)
track <- get_track_audio_features(plist1$track.id)
track1$artists
track1$album.artists
track1$album.artists$name
track <- rbind(track1$artists,track2$artists,track3$artists,track4$artists,track5$artists,track6$artists)
track2 <- get_track_audio_features(plist1$track.id)
track3 <- get_track_audio_features(plist1$track.id)
track4 <- get_track_audio_features(plist1$track.id)
track5 <- get_track_audio_features(plist1$track.id)
track6 <- get_track_audio_features(plist1$track.id)
track <- rbind(track1$artists,track2$artists,track3$artists,track4$artists,track5$artists,track6$artists)
track2 <- get_track_audio_features(plist2$track.id)
track3 <- get_track_audio_features(plist3$track.id)
track4 <- get_track_audio_features(plist4$track.id)
track5 <- get_track_audio_features(plist5$track.id)
track6 <- get_track_audio_features(plist6$track.id)
track <- rbind(track1$artists,track2$artists,track3$artists,track4$artists,track5$artists,track6$artists)
track1$artists
track2$artists
track2 <- get_track_audio_features(plist2$track.id)
#voy por separado porque get_audio_features solo va de 100 en 100
track1 <- get_track_audio_features(plist1$track.id)
track2 <- get_track_audio_features(plist2$track.id)
track3 <- get_track_audio_features(plist3$track.id)
track4 <- get_track_audio_features(plist4$track.id)
track5 <- get_track_audio_features(plist5$track.id)
track6 <- get_track_audio_features(plist6$track.id)
names(track1)
#voy por separado porque get_audio_features solo va de 100 en 100
track1 <- get_track(plist1$track.id)
#voy por separado porque get_audio_features solo va de 100 en 100
track1 <- get_tracks(plist1$track.id)
#voy por separado porque get_audio_features solo va de 100 en 100
track1 <- get_tracks(plist1$track.id)
track2 <- get_tracks(plist2$track.id)
track3 <- get_tracks(plist3$track.id)
track4 <- get_tracks(plist4$track.id)
track5 <- get_tracks(plist5$track.id)
track6 <- get_tracks(plist6$track.id)
track <- rbind(track1$artists,track2$artists,track3$artists,track4$artists,track5$artists,track6$artists)
trsck
track
track[1]
track[1]$name
track[1]$type
?get_tack
names(plist)
plist$track.artists
?laply
lapply(plist$track.artists, fun.split)
?fun.split
?split
lapply(plist$track.artists, split)
lapply(plist$track.artists, f = split)
lapply(plist$track.artists, FUN= split)
?separate
plist$track.artists
separate(plist$track.artists, c(NA, 'name'))
?splitList
??splitList
split(plist$track.artists, f = names(plist$track.artists))
#efectivamente, solo da genero a los artistas
#voy a mirar como sacar el nombre del artista, porque viene en una lista dentro del data frame
artist <- plist$track.artists
names(artist)
artist
artist[1]
artist[2]
factor(artist)
artist
?sapply
lapply(artist,1)
lapply(artist,'[',1)
lapply(artist,'[',2)
lapply(artist,'[[',2)
artist
#efectivamente, solo da genero a los artistas
#voy a mirar como sacar el nombre del artista, porque viene en una lista dentro del data frame
artist <- plist$track.artists
artist <- lapply(artist, '[[',2) #esto me da la segunda columna de la lista, con sus elementos como string
artist
artist[
1
]
artist[2]
artist[300]
get_artist(artist[300])
get_artist(artist[1])
artist[length > 10]
?find
artist
#no se arreglar esto, voy a seguir quedandome solo con el primer nombre
cond <- sapply(artist, function(x) length(x) > 23)
cond
length(artist[1])
length(artist[300])
artist <- lapply(artist, '[',2) #esto me da la segunda columna de la lista, con sus elementos como string
artist
#efectivamente, solo da genero a los artistas
#voy a mirar como sacar el nombre del artista, porque viene en una lista dentro del data frame
artist <- plist$track.artists
artist <- lapply(artist, '[[',2) #esto me da la segunda columna de la lista, con sus elementos como string
artist
artist <- lapply(artist, '[',2)
artist
#la solucion es vovler a usar lapply como antes y te saca la columna que pidas. de momento voy a coger solo la 1
artist <- lapply(artist, '[[',1)
artist
aux <- get_artist(artist)
aux <- get_artists(artist)
?get_artists
aux <- get_artist(artist)
aux <- get_artist(unlist(artist)
aux <- get_artist(unlist(artist))
aux <- get_artists(artist)
aux <- get_artists(unlist(artist)
aux <- get_artists(unlist(artist))
unlist(artist)
#efectivamente, solo da genero a los artistas
#voy a mirar como sacar el nombre del artista, porque viene en una lista dentro del data frame
artist <- plist$track.artists
artist <- lapply(artist, '[[',2) #esto me da la segunda columna de la lista, con sus elementos como string
#la solucion es vovler a usar lapply como antes y te saca la columna que pidas. de momento voy a coger solo la 1
artist <- lapply(artist, '[[',1)
aux <- get_artists(unlist(artist))
artist
aux <- get_artists(artist)
aux <- get_artists(artist[1:50])
aux <- rbind(aux,get_artists(artist[51:100]))
aux <- rbind(aux,get_artists(artist[101:150]))
aux <- rbind(aux,get_artists(artist[151:200]))
aux <- rbind(aux,get_artists(artist[201:250]))
aux <- rbind(aux,get_artists(artist[251:300]))
aux$genres
#le meto los generos a plist
plist <- mutate(plist,aux$genre)
names(plist)
plist1$track.id
library(tidyverse)
glimpse(plist2)
enframe(plist1$track.artists)
deframe(plist1$track.artists)
plist1$track.artists %>% unnest(value)
plist1$track.artists %>% unnest()
plist1$track.artists %>% unnest(name)
plist1$track.artists %>% unnest(cols = "value")
plist1$track.artists[,2]
plist1$track.artists
glimpse(plist1)
######### GET GENRE
p <- plist1
p$track.id
p %>% select(track.id, track.artists)
p %>% select(track.id, track.artists)
p %>% select(track.id, track.artists) %>% unnest(track.artists)
p %>%
select(track.id, track.artists) %>%
unnest(track.artists) %>%
select(id) %>%
rename(artist.id = id)
p %>%
select(track.id, track.artists) %>%
unnest(track.artists) %>%
select(track.id, id) %>%
rename(artist.id = id)
tracks_and_artist <- p %>%
select(track.id, track.artists) %>%
unnest(track.artists) %>%
select(track.id, id) %>%
rename(artist.id = id)
tracks_and_artist <- p %>%
select(track.id, track.artists)
tracks_and_artist
tracks_and_artist <- p %>%
select(track.id, track.artists) %>%
unnest(track.artists)
tracks_and_artist
######### GET GENRE
p <- plist1
tracks_and_artist <- p %>%
select(track.id, track.artists) %>%
unnest(track.artists) %>%
select(track.id, id) %>%
rename(artist.id = id)
######### GET GENRE
p <- plist1
tracks_and_artist <- p %>%
select(track.id, track.artists) %>%
unnest(track.artists) %>%
select(track.id, id) %>%
rename(artist.id = id)
tracks_and_artist
artists_info <- get_artists(tracks_and_artist %>% pull(artist.id))
library(spotifyr)
artists_info <- get_artists(tracks_and_artist %>% pull(artist.id))
#paquete para la api de spoti
library('spotifyr')
#conseguir token de la api
Sys.setenv(SPOTIFY_CLIENT_ID = '44855249207d40619183b073132a6407')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2296850888224ff0bb4e35ad23962578')
artists_info <- get_artists(tracks_and_artist %>% pull(artist.id))
artists_info <- spotifyr::get_artists(tracks_and_artist %>% pull(artist.id))
library(rvest)
artists_info <- spotifyr::get_artists(tracks_and_artist %>% pull(artist.id))
glimpse(artist)
View(arti)
tracks_and_artist
#Intento de primer proyecto con spoti
#La idea es tomar una gran cantidad de datos, con genero de cancion, playlist o usuario del que toma el track
#y crear samples de esa poblacion para comparar la efectividad de los algoritmos de clustering en ejemplos reales
#NOTA: abajo del todo hay una prueba con mis playlist
source('01_setup.R')
#paquete para la api de spoti
library('spotifyr')
#conseguir token de la api
Sys.setenv(SPOTIFY_CLIENT_ID = '44855249207d40619183b073132a6407')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2296850888224ff0bb4e35ad23962578')
access_token <- get_spotify_access_token()
aut <- get_spotify_authorization_code()
######### GET GENRE
p <- plist1
tracks_and_artist <- p %>%
select(track.id, track.artists) %>%
unnest(track.artists) %>%
select(track.id, id) %>%
rename(artist.id = id)
artists_info <- spotifyr::get_artists(tracks_and_artist %>% pull(artist.id) %>% distinct())
inner_join(tracks_and_artist, artists_info, by = c("artist.id", "id"))
library(tidyverse)
artists_info <- spotifyr::get_artists(tracks_and_artist %>% pull(artist.id) %>% unique())
artists_info
glimpse(artist_info)
glimpse(artists_info)
artists_info <- spotifyr::get_artists(tracks_and_artist %>% pull(artist.id) %>% unique())
artists_info %>% select(genre, id) %>%  rename(artis.id = id)
artists_info %>% select(genres, id) %>%  rename(artis.id = id)
artists_info <- artists_info %>% select(genres, id) %>%  rename(artis.id = id)
inner_join(tracks_and_artist, artists_info)
tracks_and_artist
artists_info
artists_info <- spotifyr::get_artists(tracks_and_artist %>% pull(artist.id) %>% unique())
artists_info <- artists_info %>% select(genres, id) %>%  rename(artist.id = id)
inner_join(tracks_and_artist, artists_info)
tracks_and_genres <- inner_join(tracks_and_artist, artists_info)
tracks_and_genres %>% unnest(genres)
tracks_and_genres <- inner_join(tracks_and_artist, artists_info)  %>% unnest(genres)
tracks_and_genres %>% group_by(genres) %>% count()
tracks_and_genres %>% group_by(genres) %>% count() %>% arrange(desc(n))
tracks_and_genres %>% pivot_longer(genres)
tracks_and_genres
tracks_and_genres %>% pivot_wider(names_from = genres, values_fill = FALSE)
tracks_and_genres
tracks_and_genres %>% pivot_wider(names_from = genres, values_fill = FALSE)
tracks_and_genres %>% pivot_wider(names_from = genres)
tracks_and_genres
tracks_and_genres %>% mutate(value = TRUE) %>% pivot_wider(names_from = genres, values_from = value, values_fill = FALSE)
tracks_and_artist
p
tracks_training <- tracks_training %>% select(track.id, energy) %>% distinct(track.id)
tracks_training <- p %>% select(track.id, energy) %>% distinct(track.id)
tracks_training
glimpse(p)
tracks_training <- p %>% select(track.id, valence) %>% distinct(track.id)
ggplot(tracks_training, aes(valence)) +
geom_histogram()
tracks_training
tracks_training <- p %>% distinct(track.id) %>% select(track.id, valence)
tracks_training <- p %>% select(track.id, valence)
ggplot(tracks_training, aes(valence)) +
geom_histogram()
table(is.na(tracks_training$valence))
