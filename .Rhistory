a <- 5
plot(cars)
plot(cars)
source("C:/Github/TFG_mate/tfg/1_setup.R")
source("C:/Github/TFG_mate/tfg/0_execute_all.R")
source("C:/Github/TFG_mate/tfg/0_execute_all.R")
rm(list=ls())
source("C:/Github/TFG_mate/tfg/0_execute_all.R")
source("C:/Github/TFG_mate/tfg/0_execute_all.R")
source("C:/Github/TFG_mate/tfg/0_execute_all.R")
#cargar paquetes
source("1_setup.R")
#Quiero leer el archivo de datos primero
dataset<-'data/artificial/zelnik4.arff'
X<-read.arff(dataset)
summary(X)#variables que tienen los datos
#Elijo un numero de clusters (voy a coger directamente el numero de clases que dan los datos)
k<-nlevels(X$class)
#Elijo un numero de clusters (voy a coger directamente el numero de clases que dan los datos)
k<-nlevels(X$CLASS)
k
#Hago partición kmeans y kmea++
source("km-kmpp.R")
X <- km_clustering(X,k)
#solucion del kmeans
plot_km <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = km))
plot_km
#dbscan (ahora funciona pero no se muy bien que valores de MinPts y epsiloin poner)
#estos numeros son para complex9 (12,4)
epsilon <- 12 #bastante arbitrario de momento
MinPts <- 4 #numero variables*2
C_dbs <- X %>% select(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
plot_dbs <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs
#dbscan (ahora funciona pero no se muy bien que valores de MinPts y epsiloin poner)
#estos numeros son para complex9 (12,4)
epsilon <- 12 #bastante arbitrario de momento
MinPts <- 10 #numero variables*2
C_dbs <- X %>% select(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
plot_dbs <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
#dbscan (ahora funciona pero no se muy bien que valores de MinPts y epsiloin poner)
#estos numeros son para complex9 (12,4)
epsilon <- 0.2 #bastante arbitrario de momento
MinPts <- 10 #numero variables*2
C_dbs <- X %>% select(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
plot_dbs <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs
#dbscan (ahora funciona pero no se muy bien que valores de MinPts y epsiloin poner)
#estos numeros son para complex9 (12,4)
epsilon <- 0.1 #bastante arbitrario de momento
MinPts <- 10 #numero variables*2
C_dbs <- X %>% select(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
plot_dbs <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs
#Quiero leer el archivo de datos primero
dataset<-'data/artificial/cure-t2-4k.arff'
X<-read.arff(dataset)
summary(X)#variables que tienen los datos
#Elijo un numero de clusters (voy a coger directamente el numero de clases que dan los datos)
k<-nlevels(X$class)
k
#Hago partición kmeans y kmea++
source("km-kmpp.R")
X <- km_clustering(X,k)
#solucion del kmeans
plot_km <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = km))
plot_km
#solucion kmeanspp
plot_kmpp <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = kpp))
plot_kmpp
#dbscan (ahora funciona pero no se muy bien que valores de MinPts y epsiloin poner)
#estos numeros son para complex9 (12,4)
epsilon <- 0.1 #bastante arbitrario de momento
MinPts <- 10 #numero variables*2
C_dbs <- X %>% select(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
plot_dbs <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs
MinPts <- 12 #numero variables*2
C_dbs <- X %>% select(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
plot_dbs <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs
#dbscan (ahora funciona pero no se muy bien que valores de MinPts y epsiloin poner)
#estos numeros son para complex9 (12,4)
epsilon <- 0.06 #bastante arbitrario de momento
MinPts <- 12 #numero variables*2
C_dbs <- X %>% select(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
plot_dbs <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs
#dbscan (ahora funciona pero no se muy bien que valores de MinPts y epsiloin poner)
#estos numeros son para complex9 (12,4)
epsilon <- 0.08 #bastante arbitrario de momento
MinPts <- 15 #numero variables*2
C_dbs <- X %>% select(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
plot_dbs <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs
?filter
summary(X)
plot_dbs
X_Filter <- X %>% select(,dbs != "0")
X_Filter <- X %>% select(,X$dbs != "0")
X$dbs
X_Filter <- X %>% select(,dbs != 0)
C_dbs <- X %>% filter(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X_Filter <- X %>% filter(,dbs != 0)
summary(X_Filter)
plot_dbs_filtro <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs_filtro
?filter
X_Filter <- X %>% filter(,dbs != '0')
plot_dbs_filtro <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs_filtro
X_Filter <- X %>% filter(,dbs == '0')
summary(X_Filter)
X_Filter <- X %>% filter(,dbs == '0', .preserve = FALSE)
summary(X_Filter)
X_Filter <- X %>% filter(,dbs == 0, .preserve = FALSE)
summary(X_Filter)
X_Filter <- X %>% filter(,dbs > 0, .preserve = FALSE)
summary(X_Filter)
X_Filter <- filter(X,dbs != 0, .preserve = FALSE)
summary(X_Filter)
plot_dbs_filtro <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs_filtro
X_Filter$dbs
plot_dbs_filtro <- ggplot(data = X_Filter) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs_filtro
plot_dbs_filtro <- ggplot(data = X_Filter) + geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], colour = dbs))
plot_dbs_filtro
X_Fitler <- km_clustering(X_Filter,k)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
#Elijo un numero de clusters (voy a coger directamente el numero de clases que dan los datos)
k<-nlevels(X$class)
k
X_Fitler <- km_clustering(X_Filter,k-1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Fitler <- km_clustering(X_Filter,k-1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
k-1
X_Filter <- km_clustering(X_Filter,k-1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
?kmeans
#Hago partición kmeans y kmea++
source("km-kmpp.R")
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,20)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,20)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,20)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,50)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,5)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = kpp))
plot_km_filtro
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
#prueba de optics (aun tengo que ver como representarlo diferente al resto)
opt <- X %>% select(c(1,2)) %>% optics(,minPts = 4)
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
#prueba de optics (aun tengo que ver como representarlo diferente al resto)
opt <- X %>% select(c(1,2)) %>% optics(,minPts = 4)
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
#solucion del kmeans
plot_km <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = km))
grid.arrange(plot_km,plot_km_filtro)
grid.arrange(plot_km,plot_km_filtro)
grid.arrange(plot_km,plot_km_filtro,ncol=2)
grid.arrange(plot_km,plot_km_filtro,ncol=2)
plot_km <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = km)) +
labs(title = "K means sin filtrado", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km)) + labs(title = "K means con filtrado previo", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
plot_real <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = class)) + labs(title = "Real Data Distribution", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
grid.arrange(plot_km,plot_km_filtro,plot_real,ncol=3)
plot_km <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = km)) +
labs(title = "K means sin filtrado", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km)) + labs(title = "K means con filtrado previo", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
plot_real <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = class)) + labs(title = "Real Data Distribution", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
grid.arrange(plot_km,plot_km_filtro,plot_real,ncol=3, top ='Efecto del filtrado de ruido por densidad')
