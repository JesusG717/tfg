#remove all varibles with less than 15 elements
low <- c("trance mexicano|west austrian hop hop|electro|latin|latin hip hop|reggaeton|deep groove house|brazilian edm|brostep|complextro|mexican edm|pop rap|rawstyle|canadian metal|pop|rap rock|frenchcore|hardstyle|filter house|full on|post-teen pop|trance|alt z|alternative r&b|candy pop|dark pop|electropop|metropopolis|spanish indie pop|swedish electropop|swedish synthpop|viral pop|australian dance|melbourne bounce|melbourne bounce international")
track_features %>% filter(!grepl(low,genres))
#filter genres
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n)) %>% filter(n<4)
l <- track_features %>% group_by(genres) %>% count() %>% arrange(desc(n)) %>% filter(n<15)
d <- track_features %>% filter(!grepl(low,genres))
d %>% group_by(genres) %>% count() %>% arrange(desc(n)) %>% filter(n<15)
#remove all varibles with less than 15 elements
low <- c("trance mexicano|west australian hop hop|electro|latin|latin hip hop|reggaeton|deep groove house|brazilian edm|brostep|complextro|mexican edm|pop rap|rawstyle|canadian metal|industrial metal|pop|rap rock|frenchcore|hardstyle|filter house|full on|post-teen pop|trance|alt z|alternative r&b|candy pop|dark pop|electropop|metropopolis|spanish indie pop|swedish electropop|swedish synthpop|viral pop|australian dance|melbourne bounce|melbourne bounce international")
track_features <- track_features %>% filter(!grepl(low,genres))
#filter genres
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n)) %>% filter(n<15)
#remove all varibles with less than 15 elements
low <- c("trance mexicano|west australian hip hop|electro|latin|latin hip hop|reggaeton|deep groove house|brazilian edm|brostep|complextro|mexican edm|pop rap|rawstyle|canadian metal|industrial metal|pop|rap rock|frenchcore|hardstyle|filter house|full on|post-teen pop|trance|alt z|alternative r&b|candy pop|dark pop|electropop|metropopolis|spanish indie pop|swedish electropop|swedish synthpop|viral pop|australian dance|melbourne bounce|melbourne bounce international")
track_features <- track_features %>% filter(!grepl(low,genres))
#filter genres
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n)) %>% filter(n<15)
#filter genres
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n)) %>% filter(n<20)
#filter genres
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n))
#filter genres
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n))
#Data preparation and classification
#Loading and setting the data obtained in Data_collection
source("01_setup.R")
#filter genres
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n))
#standarize all varaibles
track_features <- track_features %>% mutate(, tempo = (tempo-min(tempo))/(max(tempo)-min(tempo)))
track_features <- track_features %>% mutate(, loudness = (loudness-min(loudness))/(max(loudness)-min(loudness)))
features <- track_features %>% select(-c("key","mode"))
#funciones para hacer el clutering por densidad
#primero el dbscan
dbs <- function(X,epsilon,MinPts){
C_d <- X %>% select(c(1,2)) %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
return(X)
}
#Voy a definir una funciÃ³n que haga kmeans y kmeans++
#X un data frame con variables a estudiar en las dos primeras columnas y k numero de clusters
km_clustering <- function(X,k,num_km){
C_km<- X %>% select(c(1,2)) %>% kmeans(k,nstart = num_km)
#lo mismo pero con kmeans++
C_kpp<- X %>% select(c(1,2)) %>% kmeanspp(k)
#Voy a pintar el clustering que me da el algoritmo
#primero creo una variable que asigne la clase de cada cluster en X
X <- mutate(X, km = factor(C_km$cluster), kpp = factor(C_kpp$cluster))
return(X)
}
km_clustering_custom <- function(X,c){
C_km<- X %>% select(c(1,2)) %>% kmeans(c)
#primero creo una variable que asigne la clase de cada cluster en X
X <- mutate(X, km = factor(C_km$cluster))
return(X)
}
#jerarquico
h_clustering <- function(X,method,k){
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
#dendrograma
dendrogram <- plot(C_h)
#conseguir una particion concreta
partition_h<-cutree(C_h,k)
X <- mutate(X, hc = factor(partition_h))
return(X)
}
#classification
#first test
track_features %>% select(-c("track.id","genres"))
?NbClust
#classification
#first test
track_features %>% select(-c("track.id","genres")) %>% NbClust()
#classification
#first test
track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans")
#classification
#first test
clust1 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans")
#classification
#first test
clust1 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans" index= "shiouette")
#classification
#first test
clust1 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans" index= "silhouette")
#classification
#first test
clust1 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans" index= "sihlouette")
#classification
#first test
clust1 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans", index= "sihlouette")
#classification
#first test
clust1 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans", index= "silhouette")
clust1$Best.nc
#classification
#first test
clust1 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans")
clust2 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "complete")
#Data preparation and classification
#Loading and setting the data obtained in Data_collection
source("01_setup.R")
#for dbscan epsilon and minpts have to be determined
# rule of thumb: MinPts = 2*dimension of data. This data has a lot of duplicates so we will do 3*dim
MinPts <- 3*ncol(track_features %>% select.list(-c("track.id","genres")))
?ncol
ncol(track_features)
track_features %>% select(-c("track.id","genres"))
track_features
#for dbscan epsilon and minpts have to be determined
# rule of thumb: MinPts = 2*dimension of data. This data has a lot of duplicates so we will do 3*dim
MinPts <- track_features %>% select.list(-c("track.id","genres")) %>% 3*ncol()
#for dbscan epsilon and minpts have to be determined
# rule of thumb: MinPts = 2*dimension of data. This data has a lot of duplicates so we will do 3*dim
MinPts <- 3*ncol(track_features %>% select(-c("track.id","genres")))
#for dbscan epsilon and minpts have to be determined
# rule of thumb: MinPts = 2*dimension of data. This data has a lot of duplicates so we will do 3*dim
MinPts <- 3*ncol(track_features %>% select(-c("track.id","genres")))
?knn
track_features %>% select(-c("track.id","genres")) %>% kNN(1)
neigh <- track_features %>% select(-c("track.id","genres")) %>% kNN(1)
neigh$sort
neigh$dist
neigh$dist[,10:20]
neigh$dist[10:20,]
neigh$dist[10:50,]
neigh$dist[45:50,]
count(neigh$dist == 0)
count(filter(neigh$dist == 0)
length(filter(neigh$dist == 0)
length(filter(neigh,neigh$dist == 0)
nrow(filter(neigh,neigh$dist == 0)
nrow(filter(neigh,neigh$dist == 0))
nrow(filter(neigh,neigh$dist == 0))
neigh$dist==0
nrow(filter(neigh$dist,neigh$dist == 0))
?count
count(neigh$dist==0)
count(as.logical(neigh$dist==0)
neigh <- track_features %>% select(-c("track.id","genres")) %>% kNN(2)
neigh <- track_features %>% select(-c("track.id","genres")) %>% kNN(2)
neigh$dist
neigh$dist[100]
neigh$dist[150]
neigh$id
neigh$k
neigh$dist
d <- neigh$dist
d <- neigh$dist[,2]
d <- d>0
d <- neigh$dist[,2]
d <- d[!0]
d <- d[which(!0)]
d <- neigh$dist[,2]
d <- apply(d,function(x){x[!=0]})
d <- apply(d,function(x){x[which(!=0)]})
d <- apply(d,function(x){x[which(!0)]})
d <- apply(d,function(x){x[!0]})
d <- lapply(d,function(x){x[!0]})
d <- lapply(d,function(x){x[!0]})
d <- as.list(neigh$dist[,2])
d <- list(neigh$dist[,2])
d <- lapply(d,function(x){x[!0]})
d <- neigh$dist[,2]
d <- neigh$dist[,2]
d[!=0]
d[!0]
d[!0]
mean(d)
plot(d)
d[>0.001]
d[d>0.001]
d <- d[d>0.00001]
min(d)
mean(d)
ep <- mean(d)
track_features %>% select(-c("track.id","genres")) %>% dbs(,ep,MinPts)
track_features %>% select(-c("track.id","genres")) %>% dbs(,ep,MinPts)
#funciones para hacer el clutering por densidad
#primero el dbscan
dbs <- function(X,epsilon,MinPts){
C_d <- X %>% select(c(1,2)) %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
return(X)
}
#for dbscan epsilon and minpts have to be determined
# rule of thumb: MinPts = 2*dimension of data. This data has a lot of duplicates so we will do 3*dim
MinP <- 3*ncol(track_features %>% select(-c("track.id","genres")))
track_features %>% select(-c("track.id","genres")) %>% dbs(,ep,MinP)
track_features %>% select(-c("track.id","genres")) %>% dbs(,ep,MinPts = MinP)
track_features %>% select(-c("track.id","genres")) %>% dbs(,ep)
track_features %>% select(-c("track.id","genres")) %>% dbs(,epsilon = ep, MinPts = MinP)
#funciones para hacer el clutering por densidad
#primero el dbscan
dbs <- function(X,epsilon,MinPts){
C_d <- X %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
return(X)
}
track_features %>% select(-c("track.id","genres")) %>% dbs(,epsilon = ep, MinPts = MinP)
track_features %>% select(-c("track.id","genres")) %>% dbscan(,epsilon = ep, MinPts = MinP)
track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = ep, minPts = MinP)
track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = min(d), minPts = MinP)
track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = min(d)/2, minPts = MinP)
track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = min(d), minPts = MinP)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = min(d), minPts = MinP)
track_features %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genre"))
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
analysis
#do a kmeans after filtering noise points
aux <- track_features %>% select(-c("track.id","genres")) %>% mutate(dbs=factor(clust3$cluster)) %>% filter(dbs != 0)
clust4 <- aux %>% selec(-c("dbs")) %>% dbscan(ep,MinP)
clust4 <- aux %>% select(-c("dbs")) %>% dbscan(ep,MinP)
clust4 <- aux %>% select(-c("dbs")) %>% NbClust(method = "kmeans")
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition), km_filter = factor(clust4$Best.partition))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
analysis <- analysis %>% mutate(km_filter = factor((clust4$Best.Partition)*(clust3$cluster!=0)+(clust3$cluster)*(clust3$cluster==0))
analysis
(clust4$Best.Partition)*(clust3$cluster!=0)+(clust3$cluster)*(clust3$cluster==0)
(clust4$Best.Partition)*(clust3$cluster!=0)+(clust3$cluster)*(clust3$cluster==0))
analysis <- analysis %>% mutate(km_filter = factor((clust4$Best.Partition)*(clust3$cluster!=0)+(clust3$cluster)*(clust3$cluster==0)))
analysis <- analysis %>% mutate(km_filter = factor((clust4$Best.Partition)*(clust3$cluster!=0)))
clust3$cluster!=0
as.numeric(clust3$cluster!=0)
analysis <- analysis %>% mutate(km_filter = factor((clust4$Best.Partition)*as.numeric(clust3$cluster!=0)))
clust4$Best.Partition
clust4$Best.partition
analysis <- analysis %>% mutate(km_filter = factor((clust4$Best.partition)*as.numeric(clust3$cluster!=0)))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
analysis
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
analysis
#Data preparation and classification
#Loading and setting the data obtained in Data_collection
source("01_setup.R")
count(analysis$dbs)
levels(analysis$dbs)
?count
sumarize(analysis$dbs)
summarize(analysis$dbs)
summary(analysis$dbs)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = ep, minPts = MinP)
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis$dbs)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = max(d), minPts = MinP)
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis$dbs)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = ep, minPts = MinP)
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis$dbs)
ep <- 0.95*max(d)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = ep, minPts = MinP)
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis$dbs)
#do a kmeans after filtering noise points
aux <- track_features %>% select(-c("track.id","genres")) %>% mutate(dbs=factor(clust3$cluster)) %>% filter(dbs != 0)
clust4 <- aux %>% select(-c("dbs")) %>% NbClust(method = "kmeans")
summary(clust4)
summarize(clust4)
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster)) %>% filter(dbs != 0)
clust4 <- aux %>% select(-c("dbs","track.id","genres")) %>% NbClust(method = "kmeans")
?left_join
?left_join
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster)) %>% filter(dbs != 0)
clust4 <- aux %>% select(-c("dbs","track.id","genres")) %>% NbClust(method = "kmeans")
gc()
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
clust4 <- aux %>% select(-c("dbs","track.id","genres")) %>% NbClust(method = "kmeans")
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
aux
aux$km_filter
aux %>% select("track.id","km_filter")
aux2 <- aux %>% select("track.id","km_filter")
left_join(analysis,aux2)
aux3<-left_join(analysis,aux2)
summary(aux3$km_filter)
aux3<-left_join(analysis,aux2, by = "track.id")
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
aux2 <- aux %>% select("track.id","km_filter")
aux3<-left_join(analysis,aux2, by = "track.id")
left_join(analysis,aux2, by = "track.id")
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis$dbs)
summary(analysis)
aux2 <- aux %>% select("track.id","km_filter")
aux3 <-
aux3 <- c()
aux3 <- left_join(analysis,aux2, by = "track.id")
aux2 <- aux %>% select("track.id","genres","km_filter")
aux3 <- left_join(analysis,aux2, by = c("track.id","genres")
aux3 <- left_join(analysis,aux2, by = c("track.id","genres"))
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
aux2 <- aux %>% select("track.id","genres","km_filter")
aux3 <- left_join(analysis,aux2, by = c("track.id","genres"))
aux3 <- left_join(analysis,aux)
aux2 <- aux %>% select("track.id","genres","km_filter")
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
aux3 <- left_join(analysis,aux)
summary(aux3)
is.na(aux3$track.id)
length(is.na(aux3$track.id)))
length(is.na(aux3$track.id))
sum(as.numeric(is.na(aux3$track.id)))
sum(as.numeric(is.na(aux3$track.id)))
sum(as.numeric(is.na(aux3$genres)))
sum(as.numeric(is.na(aux3$km_filter)))
aux3 <- left_join(track_features,aux)
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis)
#PCA
pca_f <- features %>% select(-c("track.id","genres")) %>% prcomp()
summary(pca_f)
pca_f$scale
pca_f$sdev
?prcomp
pca_f$rotation
plot(pca_f$x)
plot(summary(pca_f))
pca_f$x
#Data preparation and classification
#Loading and setting the data obtained in Data_collection
source("01_setup.R")
#for dbscan epsilon and minpts have to be determined
# rule of thumb: MinPts = 2*dimension of data. This data has a lot of duplicates so we will do 3*dim
MinP <- 3*ncol(track_features %>% select(-c("track.id","genres")))
neigh <- track_features %>% select(-c("track.id","genres")) %>% kNN(2)
ep <- 0.95*max(d)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = ep, minPts = MinP)
clust3$cluster
summary(clust3)
summary(clust3$clusters)
summary(clust3$cluster)
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis$dbs)
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster)) %>% filter(dbs != 0)
clust4 <- aux %>% select(-c("dbs","track.id","genres")) %>% NbClust(method = "kmeans")
?left_join
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
aux2 <- aux %>% select("track.id","genres","km_filter")
aux3 <- left_join(track_features,aux)#ESTO NO SE NI QUE ESTA HACIENDO YA :'     )
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
aux2 <- aux %>% select("track.id","km_filter")
aux3 <- left_join(track_features,aux)#ESTO NO SE NI QUE ESTA HACIENDO YA :'     )
aux3 <- left_join(analysis,aux2)#ESTO NO SE NI QUE ESTA HACIENDO YA :'     )
aux2 <- aux %>% select("track.id","genres","km_filter")
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
aux3 <- left_join(analysis,aux2)#ESTO NO SE NI QUE ESTA HACIENDO YA :'     )
aux2 <- aux %>% select("track.id","km_filter")
aux3 <- left_join(analysis,aux2)#ESTO NO SE NI QUE ESTA HACIENDO YA :'     )
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
aux3 <- left_join(analysis,aux2)#ESTO NO SE NI QUE ESTA HACIENDO YA :'     )
aux2 <- aux %>% select("track.id","genres","km_filter")
aux3 <- left_join(analysis,aux2)#ESTO NO SE NI QUE ESTA HACIENDO YA :'     )
aux3 <- left_join(analysis,aux2, by = c("track.id","genres"), suffix = c("1","2"))
?NbClust
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition), N = c(1:nrow(track_features)))
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster), N = c(1:nrow(track_features))) %>% filter(dbs != 0)
aux$N
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4,index = "ch")
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
aux2 <- aux %>% select("N","km_filter")
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
?merge
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(N = c(1:nrow(track_features)))
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
aux2 <- aux %>% select("N","km_filter")
aux3 <- left_join(analysis,aux2, by = c("N"))
aux3 <- merge(analysis,aux2, by = c("N"))
aux3 <- left_join(analysis,aux2, by = c("N"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis)
analysis <- left_join(analysis,aux2, by = c("N"))
analysis <- analysis %>% select(-c("N"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis)
#Swap Nas to 0 in km_filter
analysis$km_filter %>% is.na()
#Swap Nas to 0 in km_filter
analysis[analysis$km_filter %>% is.na()]
#Swap Nas to 0 in km_filter
analysis$km_filter %>% is.na()]
#Swap Nas to 0 in km_filter
analysis$km_filter %>% is.na()
#Swap Nas to 0 in km_filter
analysis[analysis$km_filter %>% is.na()]=0
#Swap Nas to 0 in km_filter
analysis$km_filter[is.na(analysis$km_filter)]=0
#Swap Nas to 0 in km_filter
analysis[is.na(analysis$km_filter)]=0
#Swap Nas to 0 in km_filter
analysis$km_filter %>% is.na() %>% as.numeric()
analysis[a==1]
#Swap Nas to 0 in km_filter
a <- analysis$km_filter %>% is.na() %>% as.numeric()
analysis[a==1]
analysis[which(a==1)]
analysis$km_filter[which(a==1)]
analysis$km_filter[which(a==1)]=0
?replace_na
analysis$km_filter %>% replace_na(,0)
analysis$km_filter %>% replace_na(,replace = 0)
analysis$km_filter %>% replace_na(replace = 0)
analysis %>% replace_na(replace = 0)
analysis$km_filter %>% replace_na(0)
analysis %>% mutate(analysis$km_filter = replace_na(analysis$km_filter,0))
analysis %>% mutate(analysis$km_filter = replace_na(analysis$km_filter,0))
analysis %>% mutate(km_filter = replace_na(analysis$km_filter,0))
analysis %>% mutate(km_filter = replace_na(analysis$km_filter,10))
analysis %>% mutate(km_filter = replace_na(analysis$km_filter,c("0")))
analysis %>% mutate(km_filter = replace_na(analysis$km_filter,"0")
analysis %>% mutate(km_filter = replace_na(analysis$km_filter,"0"))
analysis %>% mutate(km_filter = replace_na(analysis$km_filter,"0"))
analysis %>% mutate(km_filter = as.character(analysis$km_filter) %>% mutate(km_filter = as.factor(replace_na(analysis$km_filter,0)))
#PCA
pca_f <- features %>% select(-c("track.id","genres")) %>% prcomp()
analysis %>% mutate(km_filter = as.character(analysis$km_filter)) %>% mutate(km_filter = as.factor(replace_na(analysis$km_filter,0)))
analysis %>% mutate(km_filter = as.character(analysis$km_filter)) %>% mutate(km_filter = as.factor(replace_na(analysis$km_filter,"0")))
analysis %>% mutate(km_filter = as.character(analysis$km_filter)) %>% mutate(km_filter = replace_na(analysis$km_filter,"0"))
?rep
#Swap Nas to 0 in km_filter
rep(0,ncol(analysis))
#Swap Nas to 0 in km_filter
a <- rep(0,ncol(analysis))
add_row(analysis,a)
?add_row
add_row(analysis,km_filter = "0")
b <- add_row(analysis,km_filter = "0")
b[40103]
b(40103)
b(4103)
b[4103]
b[4103,]
analysis <- add_row(analysis,km_filter = "0")
analysis %>% replace_na(,0)
analysis$km_filter %>% replace_na(,0)
summary(analysis)
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(N = c(1:nrow(track_features)))
#to add the km_filter data
aux2 <- aux %>% select("N","km_filter")
analysis <- left_join(analysis,aux2, by = c("N"))
analysis <- analysis %>% select(-c("N"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
#Swap Nas to 0 in km_filter
a <- rep(0,ncol(analysis))
analysis <- add_row(analysis,km_filter = "0")
analysis$km_filter %>% replace_na(,0)
summary(analysis)
as.factor(analysis$km_filter)
analysis %>% mutate(km_filter = as.factor(analysis$km_filter))
analysis$km_filter %>% replace_na(,0)
summary(analysis)
analysis <- analysis %>% mutate(km_filter = as.factor(analysis$km_filter))
analysis$km_filter %>% replace_na(,0)
summary(analysis)
summary(analysis)
analysis$km_filter %>% replace_na(,0)
analysis$km_filter %>% replace_na(0)
analysis[-4103,]
analysis <- analysis[-4103,]
analysis[4102,]
summary(analysis)
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4,index = c("ch","silhouette"))
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4,index = "ch")
?NbClust
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4)
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4)
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster), N = c(1:nrow(track_features))) %>% filter(dbs != 0)
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4)
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4,index = "ch")
