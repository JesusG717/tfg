MinPts <- 10 #numero variables*2
C_dbs <- X %>% select(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
plot_dbs <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
#dbscan (ahora funciona pero no se muy bien que valores de MinPts y epsiloin poner)
#estos numeros son para complex9 (12,4)
epsilon <- 0.2 #bastante arbitrario de momento
MinPts <- 10 #numero variables*2
C_dbs <- X %>% select(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
plot_dbs <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs
#dbscan (ahora funciona pero no se muy bien que valores de MinPts y epsiloin poner)
#estos numeros son para complex9 (12,4)
epsilon <- 0.1 #bastante arbitrario de momento
MinPts <- 10 #numero variables*2
C_dbs <- X %>% select(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
plot_dbs <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs
#Quiero leer el archivo de datos primero
dataset<-'data/artificial/cure-t2-4k.arff'
X<-read.arff(dataset)
summary(X)#variables que tienen los datos
#Elijo un numero de clusters (voy a coger directamente el numero de clases que dan los datos)
k<-nlevels(X$class)
k
#Hago partición kmeans y kmea++
source("km-kmpp.R")
X <- km_clustering(X,k)
#solucion del kmeans
plot_km <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = km))
plot_km
#solucion kmeanspp
plot_kmpp <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = kpp))
plot_kmpp
#dbscan (ahora funciona pero no se muy bien que valores de MinPts y epsiloin poner)
#estos numeros son para complex9 (12,4)
epsilon <- 0.1 #bastante arbitrario de momento
MinPts <- 10 #numero variables*2
C_dbs <- X %>% select(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
plot_dbs <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs
MinPts <- 12 #numero variables*2
C_dbs <- X %>% select(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
plot_dbs <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs
#dbscan (ahora funciona pero no se muy bien que valores de MinPts y epsiloin poner)
#estos numeros son para complex9 (12,4)
epsilon <- 0.06 #bastante arbitrario de momento
MinPts <- 12 #numero variables*2
C_dbs <- X %>% select(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
plot_dbs <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs
#dbscan (ahora funciona pero no se muy bien que valores de MinPts y epsiloin poner)
#estos numeros son para complex9 (12,4)
epsilon <- 0.08 #bastante arbitrario de momento
MinPts <- 15 #numero variables*2
C_dbs <- X %>% select(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X <- mutate(X, dbs = factor(C_dbs$cluster))
plot_dbs <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs
?filter
summary(X)
plot_dbs
X_Filter <- X %>% select(,dbs != "0")
X_Filter <- X %>% select(,X$dbs != "0")
X$dbs
X_Filter <- X %>% select(,dbs != 0)
C_dbs <- X %>% filter(c(1,2)) %>% dist() %>% dbscan(epsilon,MinPts)
X_Filter <- X %>% filter(,dbs != 0)
summary(X_Filter)
plot_dbs_filtro <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs_filtro
?filter
X_Filter <- X %>% filter(,dbs != '0')
plot_dbs_filtro <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs_filtro
X_Filter <- X %>% filter(,dbs == '0')
summary(X_Filter)
X_Filter <- X %>% filter(,dbs == '0', .preserve = FALSE)
summary(X_Filter)
X_Filter <- X %>% filter(,dbs == 0, .preserve = FALSE)
summary(X_Filter)
X_Filter <- X %>% filter(,dbs > 0, .preserve = FALSE)
summary(X_Filter)
X_Filter <- filter(X,dbs != 0, .preserve = FALSE)
summary(X_Filter)
plot_dbs_filtro <- ggplot(data = X) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs_filtro
X_Filter$dbs
plot_dbs_filtro <- ggplot(data = X_Filter) + geom_point(mapping = aes(x = X[,1], y = X[,2], colour = dbs))
plot_dbs_filtro
plot_dbs_filtro <- ggplot(data = X_Filter) + geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], colour = dbs))
plot_dbs_filtro
X_Fitler <- km_clustering(X_Filter,k)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
#Elijo un numero de clusters (voy a coger directamente el numero de clases que dan los datos)
k<-nlevels(X$class)
k
X_Fitler <- km_clustering(X_Filter,k-1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Fitler <- km_clustering(X_Filter,k-1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
k-1
X_Filter <- km_clustering(X_Filter,k-1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
?kmeans
#Hago partición kmeans y kmea++
source("km-kmpp.R")
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,20)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,20)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,20)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,50)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,5)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = kpp))
plot_km_filtro
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
#prueba de optics (aun tengo que ver como representarlo diferente al resto)
opt <- X %>% select(c(1,2)) %>% optics(,minPts = 4)
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
#prueba de optics (aun tengo que ver como representarlo diferente al resto)
opt <- X %>% select(c(1,2)) %>% optics(,minPts = 4)
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,10)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
X_Filter <- km_clustering(X_Filter,k-1,1)
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km))
plot_km_filtro
#solucion del kmeans
plot_km <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = km))
grid.arrange(plot_km,plot_km_filtro)
grid.arrange(plot_km,plot_km_filtro)
grid.arrange(plot_km,plot_km_filtro,ncol=2)
grid.arrange(plot_km,plot_km_filtro,ncol=2)
plot_km <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = km)) +
labs(title = "K means sin filtrado", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km)) + labs(title = "K means con filtrado previo", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
plot_real <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = class)) + labs(title = "Real Data Distribution", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
grid.arrange(plot_km,plot_km_filtro,plot_real,ncol=3)
plot_km <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = km)) +
labs(title = "K means sin filtrado", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
plot_km_filtro <- ggplot(data = X_Filter)+geom_point(mapping = aes(x = X_Filter[,1], y = X_Filter[,2], color = km)) + labs(title = "K means con filtrado previo", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
plot_real <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = class)) + labs(title = "Real Data Distribution", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
grid.arrange(plot_km,plot_km_filtro,plot_real,ncol=3, top ='Efecto del filtrado de ruido por densidad')
install.packages("spotifyr")
#paquete para la api de spoti
library('sporifyr')
#paquete para la api de spoti
library('spotifyr')
library('tidyverse')
#Pruebas con datos de spotify
source('01_setup.R')
#conseguir token de la api
Sys.setenv(SPOTIFY_CLIENT_ID = '44855249207d40619183b073132a6407')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2296850888224ff0bb4e35ad23962578')
access_token <- get_spotify_access_token()
get_album('the getaway')
get_album('The Getaway')
beatles <- get_artist_audio_features('the beatles')
beatles
View(plot_dbs_filtro)
#Pruebas con datos de spotify
source('01_setup.R')
#paquete para la api de spoti
library('spotifyr')
#conseguir token de la api
Sys.setenv(SPOTIFY_CLIENT_ID = '44855249207d40619183b073132a6407')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2296850888224ff0bb4e35ad23962578')
access_token <- get_spotify_access_token()
beatles <- get_artist_audio_features('metallica')
beatles
?get_user_audio_features
yo <- get_user_audio_features(user = 'chus',)
yo <- get_user_audio_features(user = 'ez74nswjvds93w2btv59sqwb4',)
mutate(
artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)
) %>%
select(
all_of(c("track.name", "artist.name", "track.album.name", "played_at"))
) %>%
yo <- get_artist_audio_features('the beatles')
yo <- get_artist_audio_features('megadeath')
sumary(yo)
summary(yo)
select(yo, c('artist_name','album_type','album_id'))
yo[1,1]
yo[2,1]
yo[2,2]
yo[2,3]
yo[2,4]
yo[2,5]
yo[2,6]
yo[2,7]
yo[2,8]
yo[2,89
yo[2,9]
yo[2,10]
yo[2,11]
select(yo, c('energy','danceability','key','loudness'))
sub <- select(yo, c('energy','danceability','key','loudness'))
summary(sub)
sub <- select(yo, c('energy','danceability','key_mode','loudness'))
summary(sub)
sub %>% count(key_mode, sort = TRUE) %>% head(5) >%> ktable
sub %>% count(key_mode, sort = TRUE) %>% head(5) >%> kable
install.packages("purrr")
install.packages("purrr")
install.packages("knitr")
#mas mierda de hacer tablitas y eso
library(knitr)
sub %>% count(key_mode, sort = TRUE) %>% head(5) >%> kable
?head
sub %>% count(key_mode, sort = TRUE)
sub %>% count(key_mode, sort = TRUE) %>% head(5) >%> kable()
sub %>% count(key_mode, sort = TRUE) %>% head(5)
sub %>% count(key_mode, sort = TRUE) %>% head(5) %>% kable()
yo <- get_artist_audio_features('Mandragora')
summary(yo)
sub <- select(yo, c('energy','danceability','key_mode','loudness'))
summary(sub)
sub %>% count(key_mode, sort = TRUE) %>% head(5) %>% kable()
yo <- get_artist_audio_features('Hard GZ')
sub <- select(yo, c('energy','danceability','key_mode','loudness'))
summary(sub)
sub %>% count(key_mode, sort = TRUE) %>% head(5) %>% kable()
yo <- get_artist_audio_features('Queen')
sub <- select(yo, c('energy','danceability','key_mode','loudness'))
summary(sub)
sub %>% count(key_mode, sort = TRUE) %>% head(5) %>% kable()
yo <- get_artist_audio_features('red hot chili peppers')
sub <- select(yo, c('energy','danceability','key_mode','loudness'))
summary(sub)
sub %>% count(key_mode, sort = TRUE) %>% head(5) %>% kable()
yo <- get_artist_audio_features('Iron Maiden')
sub <- select(yo, c('energy','danceability','key_mode','loudness'))
summary(sub)
sub %>% count(key_mode, sort = TRUE) %>% head(5) %>% kable()
yo <- get_artist_audio_features('Metallica')
sub <- select(yo, c('energy','danceability','key_mode','loudness'))
summary(sub)
sub %>% count(key_mode, sort = TRUE) %>% head(5) %>% kable()
yo <- get_artist_audio_features('Sepultura')
sub <- select(yo, c('energy','danceability','key_mode','loudness'))
summary(sub)
sub %>% count(key_mode, sort = TRUE) %>% head(5) %>% kable()
get_user_audio_features()
?get_user_audio_features()
u <- get_user_audio_features(username = 'ez74nswjvds93w2btv59sqwb4')
#conseguir token de la api
Sys.setenv(SPOTIFY_CLIENT_ID = '44855249207d40619183b073132a6407')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2296850888224ff0bb4e35ad23962578')
access_token <- get_spotify_access_token()
#prueba 1: te saca en orden las escalas mas usadas del artista
yo <- get_artist_audio_features('Sepultura')
sub <- select(yo, c('energy','danceability','key_mode','loudness'))
summary(sub)
sub %>% count(key_mode, sort = TRUE) %>% head(5) %>% kable()
u <- get_user_audio_features(username = 'ez74nswjvds93w2btv59sqwb4')
u <- get_user_audio_features(username = 'ez74nswjvds93w2btv59sqwb4')
?get_user_playlists
u <- get_user_playlists('ez74nswjvds93w2btv59sqwb4')
?get_my_top_artists_or_tracks
get_my_playlists()
Sys.setenv(SPOTIFY_CLIENT_ID = '44855249207d40619183b073132a6407')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2296850888224ff0bb4e35ad23962578')
access_token <- get_spotify_access_token()
get_my_playlists()
get_my_playlists()
u <- get_user_playlists('ez74nswjvds93w2btv59sqwb4')
u <- get_user_playlists('ez74nswjvds93w2btv59sqwb4')
#cargar paquetes
source("01_setup.R")
#Quiero leer el archivo de datos primero
dataset<-'data/artificial/aggregation.arff'
X<-read.arff(dataset)
summary(X)#variables que tienen los datos
#Elijo un numero de clusters (voy a coger directamente el numero de clases que dan los datos)
k<-nlevels(X$class)
k
#Hago partición kmeans y kmea++
source("11_km-kmpp.R")
#Hago partición para el jerarquico
source("10_hclust.R")
method<-'single' #metodos: complete, single, average, centroids
X <- h_clustering(X,method)
install.packages('factoextra')
library('factoextra')
?fviz_dend
X
#pruebas de dendrogramas mas bonitos
#necesito el objeto hclust directamente, no me vale X
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
fviz_dend(x = C_h,k = k)
fviz_dend(x = C_h,k = k, rect = TRUE)
fviz_dend(x = C_h,k = k, rect = TRUE, horiz = TRUE)
fviz_dend(x = C_h,k = k, labels_track_height = 1, rect = TRUE)
fviz_dend(x = C_h,k = k, labels_track_height = 10, rect = TRUE)
fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE)
#solucion del jerarquico
plot_h <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = hc))
plot_h
method<-'complete' #metodos: complete, single, average, centroids
X <- h_clustering(X,method)
#solucion del jerarquico
plot_h <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = hc))
plot_h
#pruebas de dendrogramas mas bonitos
#necesito el objeto hclust directamente, no me vale X
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE)
dend <- fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE)
grid.arrange(plot_h,dend,ncol=2)
dataset<-'data/artificial/3-spiral.arff'
X<-read.arff(dataset)
X<-read.arff(dataset)
k<-nlevels(X$class)
k
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
#dendrograma
dend <- fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE)
source("01_setup.R")
dataset<-'data/artificial/3-spiral.arff'
X<-read.arff(dataset)
k<-nlevels(X$class)
k
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
#dendrograma
dend <- fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE,xlab = element_blank(),ylab = element_blank()) +
partition_h<-cutree(C_h,k)
source("01_setup.R")
dataset<-'data/artificial/3-spiral.arff'
X<-read.arff(dataset)
k<-nlevels(X$class)
k
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
#dendrograma
dend <- fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE)
partition_h<-cutree(C_h,k)
X <- mutate(X, hc = factor(partition_h))
plot_h <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = hc)) +
labs(title = "Partición para k = 3", colour = "Clusters") + theme(axis.title = element_blank())
plot_real <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = class)) + labs(title = "Real Data Distribution", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
grid.arrange(plot_h,dend,plot_real,ncol = 3, main ='Clustering Jerárquico para un k conocido con su dendrograma asociado')
grid.arrange(plot_h,dend,plot_real,ncol = 3, top ='Clustering Jerárquico para un k conocido con su dendrograma asociado')
source("01_setup.R")
dataset<-'data/artificial/DS-850.arff'
X<-read.arff(dataset)
k<-nlevels(X$class)
k
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
#dendrograma
dend <- fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE)
summary(x)
summary(X)
source("01_setup.R")
dataset<-'data/artificial/DS-850.arff'
X<-read.arff(dataset)
k<-nlevels(X$CLASS)
k
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
#dendrograma
dend <- fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE)
partition_h<-cutree(C_h,k)
X <- mutate(X, hc = factor(partition_h))
plot_h <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = hc)) +
labs(title = "Partición para k = 3", colour = "Clusters") + theme(axis.title = element_blank())
plot_real <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = CLASS)) + labs(title = "Real Data Distribution", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
grid.arrange(plot_h,dend,plot_real,ncol = 3, top ='Clustering Jerárquico para un k conocido con su dendrograma asociado')
source("01_setup.R")
dataset<-'data/artificial/aggregation.arff'
X<-read.arff(dataset)
k<-nlevels(X$class)
k
method <- 'complete'
C_h <- X %>% select(c(1:2)) %>% dist() %>% hclust(method)
#dendrograma
dend <- fviz_dend(x = C_h,k = k, labels_track_height = 0, rect = TRUE)
partition_h<-cutree(C_h,k)
X <- mutate(X, hc = factor(partition_h))
plot_h <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = hc)) +
labs(title = "Partición para k = 7", colour = "Clusters") + theme(axis.title = element_blank())
plot_real <- ggplot(data = X)+geom_point(mapping = aes(x = X[,1], y = X[,2], color = class)) + labs(title = "Real Data Distribution", colour = "Clusters") + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
grid.arrange(plot_h,dend,plot_real,ncol = 3, top ='Clustering Jerárquico para un k conocido con su dendrograma asociado')
grid.arrange(plot_h,dend,plot_real,ncol = 3, top ='Clustering Jerárquico para un k conocido con su dendrograma asociado')
source('01_setup.R')
#paquete para la api de spoti
library('spotifyr')
#conseguir token de la api
Sys.setenv(SPOTIFY_CLIENT_ID = '44855249207d40619183b073132a6407')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2296850888224ff0bb4e35ad23962578')
access_token <- get_spotify_access_token()
aut <- get_spotify_authorization_code()
plist1 <- get_playlist_audio_features(playlist_uris = '37i9dQZF1E37k7BOils0mb')
plist2 <- get_playlist_audio_features(playlist_uris = '37i9dQZF1E3920mzHHtk0B')
plist3 <- get_playlist_audio_features(playlist_uris = '37i9dQZF1E38JwgfTAgiXb')
plist4 <- get_playlist_audio_features(playlist_uris = '37i9dQZF1E357mYJL8BeUV')
plist5 <- get_playlist_audio_features(playlist_uris = '37i9dQZF1E37MgbROqdOgm')
plist6 <- get_playlist_audio_features(playlist_uris = '37i9dQZF1E37MgbROqdOgm')
plist <- rbind(plist1,plist2,plist3,plist4,plist5,plist6)
#veo que variables tengo
names(plist)
plist$track.type
#veo que variables tengo
names(plist)
?get_track_audio_features
track1 <- get_track_audio_features(plist$track.id[1])
track1
track1 <- get_track_audio_analysis(plist$track.id[1])
track1
names(track1)
?get_track
track1 <- get_track(plist$track.id[1])
track1
names(track1)
track1$type
