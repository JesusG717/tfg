# tracks_genre_features <- select(tracks_genre_features,c(1:15))
# save(tracks_genre_features, file = "tracks_genre_features.RData")
tracks
df
tracks <- df %>% select(-c("track.artists"))
tracks_and_artist <- df %>% select(track.id, track.artists) %>% unnest(track.artists) %>%
select(track.id, id) %>%  rename(artist.id = id)
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
#autorizar a coger datos de usuario
aut <- get_spotify_authorization_code()
#autorizar a coger datos de usuario
aut <- get_spotify_authorization_code()
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
for (i in 2:floor(nrow(tracks_and_artist)/50)) {
aux <- get_artists(tracks_and_artist[(i-1)*50:(i-1)*50+50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
artists_info <- bind_rows(artists_info,aux)
}
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
for (i in 2:floor(nrow(tracks_and_artist)/50)) {
aux <- get_artists(tracks_and_artist[(i-1)*50:(i-1)*50+50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
artists_info <- bind_rows(artists_info,aux)
}
get_artists(tracks_and_artist[1:50,2])
View(aut)
artists_info <- get_artists(tracks_and_artist[1:50,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
for (i in 2:floor(nrow(tracks_and_artist)/50)) {
aux <- get_artists(tracks_and_artist[(i-1)*50:(i-1)*50+50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
artists_info <- bind_rows(artists_info,aux)
}
library('spotifyr')
?get_artists
tracks_and_artist[1:50,2]
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
tracks_and_artist[1,2]
#get_artists limit is 50
artists_info <- get_artist(tracks_and_artist[1,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
#get_artists limit is 50
artists_info <- get_artist(tracks_and_artist[1:49,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:49,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:10,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
artists_info <- get_artists(tracks_and_artist[1:50,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
c(tracks_and_artist[1:50,2])
#get_artists limit is 50
artists_info <- get_artists(c(tracks_and_artist[1:50,2])) %>% pull(artist.id) %>% unique() %>% as_tibble()
get_artists(c(tracks_and_artist[1:50,2]))
get_artist("0L8ExT028jH3ddEcZwqJJ5")
get_artists(c("0L8ExT028jH3ddEcZwqJJ5",""0L8ExT028jH3ddEcZwqJJ5")
get_artists(c("0L8ExT028jH3ddEcZwqJJ5","0L8ExT028jH3ddEcZwqJJ5")
get_artists(c("0L8ExT028jH3ddEcZwqJJ5","0L8ExT028jH3ddEcZwqJJ5")
a <- get_artists(c("0L8ExT028jH3ddEcZwqJJ5","0L8ExT028jH3ddEcZwqJJ5")
a <- get_artists(c("0L8ExT028jH3ddEcZwqJJ5","0L8ExT028jH3ddEcZwqJJ5")
a <- get_artists(c("0L8ExT028jH3ddEcZwqJJ5","0L8ExT028jH3ddEcZwqJJ5")
#get_artists limit is 50
artists_info <- c()
#get_artists limit is 50
artists_info <- c()
for (i in 1:floor(nrow(tracks_and_artist)/50)) {
aux <- get_artists(tracks_and_artist[(i-1)*50+1:(i-1)*50+50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
artists_info <- bind_rows(artists_info,aux)
}
save(artists_info, file ="artists_info.RData")
artists_info <- artists_info %>% select(genres, id) %>%  rename(artist.id = id)
# artists_info %>% drop_na() %>% unnest(genres)
# glimpse(artists_info)
tracks_and_genres <- inner_join(tracks_and_artist, artists_info)  %>% drop_na() %>% unnest(genres)
#tengo en tracks_and_genres los tracks con su genero asociado, mientras que en tracks tengo los tracks con sus ids
tracks_genre_features <- left_join(tracks_and_genres,tracks)
tracks_genre_features <- select(tracks_genre_features,c(1:15))
tracks_genre_features <- select(-c("artist.id"))
tracks_genre_features <- tracks_genre_features %>% select(-c("artist.id"))
save(tracks_genre_features, file = "tracks_genre_features.RData")
load("tracks_genre_features.RData")
#DATA FILTERING/WRANGLING
#get rid of unnecessary variables (artist.id...)
track_features <- select(tracks_genre_features,c(1,3,5:15))
#filter out tracks repeated data: tracks with 2 artists or more that have the same genre asociated
track_features <- track_features %>% distinct(track.id,genres,.keep_all = TRUE)
#DATA FILTERING/WRANGLING
#get rid of unnecessary variables (artist.id...)
track_features <- tracks_genre_features
#filter out tracks repeated data: tracks with 2 artists or more that have the same genre asociated
track_features <- track_features %>% distinct(track.id,genres,.keep_all = TRUE)
track_features$danceability %>% is.na() %>% as.numeric() %>% sum()
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n)
a <- track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n) %>% filter(n<5)
'%!in%' <- function(x,y)!('%in%'(x,y))
track_features <- track_features %>% filter(genres %!in% a$genres)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n)
a <- track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n) %>% filter(n<10)
track_features <- track_features %>% filter(genres %!in% a$genres)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n)
a <- track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n) %>% filter(n<30)
'%!in%' <- function(x,y)!('%in%'(x,y))
track_features <- track_features %>% filter(genres %!in% a$genres)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n)
filtro <- c("progressive house","tropical house","electro house")
a <- track_features$genres %>% replace(which(track_features$genres %in% filtro),"house")
filtro <- c("dutch edm")
a <- a %>% replace(which(track_features$genres %in% filtro),"edm")
filtro <- c("nu metal", "rap metal","alternative metal","birmingham metal","glam metal","old school thrash",
"power metal","thrash metal")
a <- a %>% replace(which(track_features$genres %in% filtro),"metal")
filtro <- c("trap latino","trap triste")
a <- a %>% replace(which(track_features$genres %in% filtro),"trap")
filtro <-c("latin", "latin hip hop")
a <- a %>% replace(which(track_features$genres %in% filtro),"reggaeton")
filtro <-c("hard rock", "alternative rock","funk rock","album rock")
a <- a %>% replace(which(track_features$genres %in% filtro),"rock")
filtro <-c("urbano espanol", "drill espanol")
a <- a %>% replace(which(track_features$genres %in% filtro),"trap")
track_features <- track_features %>% mutate(genres = a)
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
filtro <-c("pop dance", "dance pop")
a <- a %>% replace(which(track_features$genres %in% filtro),"pop")
track_features <- track_features %>% mutate(genres = a)
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
filtro <- c("nu metal", "rap metal","alternative metal","birmingham metal","glam metal","old school thrash",
"power metal","thrash metal","funk metal")
a <- a %>% replace(which(track_features$genres %in% filtro),"metal")
track_features <- track_features %>% mutate(genres = a)
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
track_features <- track_features %>% distinct(track.id,genres,.keep_all = TRUE)
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
#saving filtered data
save(track_features, file = "track_features.RData")
#standarize all varaibles
t_max <- max(track_features$tempo)
t_min <- min(track_features$tempo)
track_features <- track_features %>% mutate( tempo = (track_features$tempo-t_min)/(t_max-t_min))
l_max <- max(track_features$loudness)
l_min <- min(track_features$loudness)
l <- (track_features$loudness-l_min)/(l_max-l_min)
track_features <- track_features %>% mutate(loudness = (track_features$loudness-l_min)/(l_max-l_min))
features <- track_features %>% select(-c("key","mode"))
#save filtered data with features adjusted
save(track_features,file = "track_features.RData")
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n))
#REPASAR CON LOS NUEVOS DATOS
glimpse(track_features)
clust1 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans")
clust2 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "complete")
#for dbscan epsilon and minpts have to be determined
# rule of thumb: MinPts = 2*dimension of data. This data has a lot of duplicates so we will do 3*dim
MinP <- 3*ncol(track_features %>% select(-c("track.id","genres")))
neigh <- track_features %>% select(-c("track.id","genres")) %>% kNN(2)
ep <- 0.95*max(d)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = ep, minPts = MinP)
ep <- 0.95*max(d)
neigh$dist
d <- neigh$dist[,2]
ep <- 0.95*max(d)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = ep, minPts = MinP)
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster), N = c(1:nrow(track_features))) %>% filter(dbs != 0)
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4,index = "ch")
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
#add the clustering results to the main data
analysis_alldata <- track_features %>% select(c("track.id","genres"))
analysis_alldata <- analysis_alldata %>% mutate(N = c(1:nrow(track_features)))
#to add the km_filter data
aux2 <- aux %>% select("N","km_filter")
analysis_alldata <- left_join(analysis_alldata,aux2, by = c("N"))
analysis_alldata <- analysis_alldata %>% select(-c("N"))
analysis_alldata <- analysis_alldata %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
#Swap Nas to 0 in km_filter
a <- rep(0,ncol(analysis_alldata))
analysis_alldata <- add_row(analysis_alldata,km_filter = "0")
analysis_alldata <- analysis_alldata %>% mutate(km_filter = as.factor(analysis_alldata$km_filter))
analysis_alldata$km_filter %>% replace_na(0)
analysis_alldata <- analysis_alldata[-4103,]
summary(analysis_alldata)
#save the file with the clusterings
save(analysis_alldata, file = "analysis_alldata.RData")
summary(track_features)
var(track_features)
var(track_features$danceability)
var(track_features$energy)
?bartlett.test()
#Data preparation and classification
#Loading and setting the data obtained in Data_collection
source("01_setup.R")
track_features %>% select(-c("track.id","genres")) %>% bartlett.test()
groups <- names(track_features %>% select(-c("track.id","genres")))
track_features %>% select(-c("track.id","genres")) %>% bartlett.test(,groups)
?ks.test
ks.test(track_features$danceability)
ks.test(track_features$danceability,pnorm)
ks.test(track_features$energy,pnorm)
#PCA
pca_f <- track_features %>% select(-c("track.id","genres")) %>% prcomp()
summary(pca_f)
as.tibble(pca_aux$x[,1:6])
as.tibble(pca_f$x[,1:6])
track_features <- track_features %>% select(-c("key","mode"))
#save filtered data with features adjusted
save(track_features,file = "track_features.RData")
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n))
load('track_features.RData')
#PCA
pca_f <- track_features %>% select(-c("track.id","genres")) %>% prcomp()
summary(pca_f)
as.tibble(pca_f$x[,1:6])
pca_f$rotation
bartlett.test(track_features)
groups <- names(track_features %>% select(-c("track.id","genres")))
track_features %>% select(-c("track.id","genres")) %>% bartlett.test(,groups)
ks.test(track_features$danceability,pnorm)
ks.test(track_features$tempo,pnorm)
clust1 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans")
clust2 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "complete")
#for dbscan epsilon and minpts have to be determined
# rule of thumb: MinPts = 2*dimension of data. This data has a lot of duplicates so we will do 3*dim
MinP <- 3*ncol(track_features %>% select(-c("track.id","genres")))
neigh <- track_features %>% select(-c("track.id","genres")) %>% kNN(2)
d <- neigh$dist[,2]
ep <- 0.95*max(d)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = ep, minPts = MinP)
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster), N = c(1:nrow(track_features))) %>% filter(dbs != 0)
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4,index = "ch")
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
#add the clustering results to the main data
analysis_alldata <- track_features %>% select(c("track.id","genres"))
analysis_alldata <- analysis_alldata %>% mutate(N = c(1:nrow(track_features)))
#to add the km_filter data
aux2 <- aux %>% select("N","km_filter")
analysis_alldata <- left_join(analysis_alldata,aux2, by = c("N"))
analysis_alldata <- analysis_alldata %>% select(-c("N"))
analysis_alldata <- analysis_alldata %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
#Swap Nas to 0 in km_filter
a <- rep(0,ncol(analysis_alldata))
analysis_alldata <- add_row(analysis_alldata,km_filter = "0")
analysis_alldata <- analysis_alldata %>% mutate(km_filter = as.factor(analysis_alldata$km_filter))
analysis_alldata$km_filter %>% replace_na(0)
analysis_alldata <- analysis_alldata[-4103,]
summary(analysis_alldata)
#save the file with the clusterings
save(analysis_alldata, file = "analysis_alldata.RData")
analysis_alldata$km
#primera interpretacion
analysis_alldata %>% group_by(km)
#primera interpretacion
analysis_alldata %>% group_by(km) %>% count()
#primera interpretacion
analysis_alldata %>% filter(km == 3)
#primera interpretacion
analysis_alldata %>% filter(km == 3) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(km == 2) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(km == 3) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(km == 1) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(dbs == 1) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(dbs == 2) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(dbs == 0) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(dbs == 3) %>% group_by(genres) %>% count()
install.packages("GGally")
#variable analysis
source('01_setup.R')
load('track_features.RData')
?ggcor
?ggcorr
features <- track_features %>% select(-c("track.id","genres"))
ggcor(features)
ggcorr(features)
#PCA
pca_f <- features %>% prcomp()
summary(pca_f)
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n))
#pick around 50 rock and metal songs so there is no overrepresentation
r <- track_features %>% filter(genres %in% c("rock")) %>% sample(50)
track_features %>% filter(genres %in% c("rock"))
?sample
#pick around 50 rock and metal songs so there is no overrepresentation
r <- track_features %>% filter(genres %in% c("rock")) %>% sample(size = 50)
sample(c(1:10),5)
sample(rbind(c(1:10),c(15:20)),5)
sample(features,50)
?sample_n
#pick around 50 rock and metal songs so there is no overrepresentation
r <- track_features %>% filter(genres %in% c("rock")) %>% slice_sample(50)
#pick around 50 rock and metal songs so there is no overrepresentation
r <- track_features %>% filter(genres %in% c("rock")) %>% slice_sample(n = 50)
m <- track_features %>% filter(genres %in% c("metal")) %>% slice_sample(n = 50)
sub_data <- track_features %>% filter(genres %!in% C("rock,metal"))
sub_data <- track_features %>% filter(genres  !C("rock,metal"))
sub_data <- track_features %>% filter(genres  != C("rock,metal"))
sub_data <- track_features %>% filter(genres %!in% C("rock,metal"))
sub_data <- track_features %>% filter(genres != C("rock,metal"))
sub_data <- track_features %>% filter(genres != "rock")
sub_data <- track_features %>% filter(genres != "rock") %>% filter(genres != "metal")
sub_data %>% rbind(r,m)
sub_data %>% rbind(r)
sub_data <- sub_data %>% rbind(r,m)
s_features <- subdata %>% select(-c("track.id","genres"))
s_features <- sub_data %>% select(-c("track.id","genres"))
clust1 <- s_features %>% NbClust(method = "kmeans")
clust2 <- s_features %>% NbClust(method = "complete")
cl1 <- s_features %>% NbClust(method = "kmeans",index = "ch")
cl1_ch <- s_features %>% NbClust(method = "kmeans",index = "ch")
km_ch <- s_features %>% NbClust(method = "kmeans",index = "ch")
km_sh <- s_features %>% NbClust(method = "kmeans",index = "silhouette")
h_ch <- s_features %>% NbClust(method = "complete",index = "ch")
h_sh <- s_features %>% NbClust(method = "kmeans",index = "silhouette")
db <- s_features %>% dbscan(,eps = ep, minPts = MinP)
km_ch$Best.nc
km_sh$Best.nc
km_ch <- s_features %>% NbClust(method = "kmeans")
h_ch <- s_features %>% NbClust(method = "complete")
#for dbscan epsilon and minpts have to be determined
# rule of thumb: MinPts = 2*dimension of data. This data has a lot of duplicates so we will do 3*dim
MinP <- 3*ncol(s_features)
neigh <- s_feaures %>% kNN(2)
d <- neigh$dist[,2]
ep <- 0.95*max(d)
db <- s_features %>% dbscan(,eps = ep, minPts = MinP)
#do a kmeans after filtering noise points
aux <- sub_data %>% mutate(dbs=factor(km_ch$cluster), N = c(1:nrow(sub_data))) %>% filter(dbs != 0)
km_db <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans")
aux <- aux %>% mutate(km_filter = factor(km_db$Best.partition))
neigh <- s_features %>% kNN(2)
d <- neigh$dist[,2]
ep <- 0.95*max(d)
db <- s_features %>% dbscan(,eps = ep, minPts = MinP)
#do a kmeans after filtering noise points
aux <- sub_data %>% mutate(dbs=factor(km_ch$cluster), N = c(1:nrow(sub_data))) %>% filter(dbs != 0)
km_db <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans")
km_db <- aux %>% select(-c("dbs","N")) %>% NbClust(method = "kmeans")
aux %>% select(-c("dbs","N"))
aux %>% select(-c("dbs","track.id","genres","N"))
db <- s_features %>% dbscan(,eps = ep, minPts = MinP)
#do a kmeans after filtering noise points
aux_S <- sub_data %>% mutate(dbs=factor(km_ch$cluster), N = c(1:nrow(sub_data))) %>% filter(dbs != 0)
km_db <- aux_s %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans")
#do a kmeans after filtering noise points
aux_S <- sub_data %>% mutate(dbs=factor(km_ch$cluster), N = c(1:nrow(sub_data))) %>% filter(dbs != 0)
#do a kmeans after filtering noise points
aux_S <- sub_data %>% mutate(dbs=factor(km_ch$Cluster), N = c(1:nrow(sub_data))) %>% filter(dbs != 0)
km_ch$Best.partition
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster), N = c(1:nrow(track_features))) %>% filter(dbs != 0)
#do a kmeans after filtering noise points
aux_S <- sub_data %>% mutate(dbs=factor(db$cluster), N = c(1:nrow(sub_data))) %>% filter(dbs != 0)
km_db <- aux_s %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans")
#do a kmeans after filtering noise points
aux_S <- sub_data %>% mutate(dbs=factor(db$cluster), N = c(1:nrow(sub_data))) %>% filter(dbs != 0)
km_db <- aux_s %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans")
#do a kmeans after filtering noise points
aux_s <- sub_data %>% mutate(dbs=factor(db$cluster), N = c(1:nrow(sub_data))) %>% filter(dbs != 0)
km_db <- aux_s %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans")
aux_s <- aux_s %>% mutate(km_filter = factor(km_db$Best.partition))
#add the clustering results to the main data
analysis_sub1 <- sub_data %>% select(c("track.id","genres"))
analysis_sub1 <- analysis_sub1 %>% mutate(N = c(1:nrow(track_features)))
#to add the km_filter data
aux2_s <- aux_s %>% select("N","km_filter")
analysis_sub1 <- left_join(analysis_sub1,aux2_s, by = c("N"))
analysis_sub1
analysis_sub1 <- analysis_sub1 %>% mutate(N = c(1:nrow(sub_data)))
#to add the km_filter data
aux2_s <- aux_s %>% select("N","km_filter")
analysis_sub1 <- left_join(analysis_sub1,aux2_s, by = c("N"))
analysis_sub1 <- analysis_sub1 %>% select(-c("N"))
analysis_sub1 <- analysis_sub1 %>% mutate(dbs = factor(dbs$cluster),km = factor(km_ch$Best.partition),
hc = factor(h_ch$Best.partition))
analysis_sub1 <- analysis_sub1 %>% mutate(dbs = factor(db$cluster),km = factor(km_ch$Best.partition),
hc = factor(h_ch$Best.partition))
analysis_alldata <- analysis_alldata[-744,]
summary(analysis_alldata)
#Swap Nas to 0 in km_filter
a <- rep(0,ncol(analysis_sub1))
analysis_sub1 <- add_row(analysis_sub1,km_filter = "0")
analysis_sub1 <- analysis_sub1 %>% mutate(km_filter = as.factor(analysis_sub1$km_filter))
analysis_sub1$km_filter %>% replace_na(0)
analysis_sub1 <- analysis_sub1[-nrow(analysis_sub1),]
summary(analysis_sub1)
#save the file with the clusterings
save(analysis_sub1, file = "analysis_sub1.RData")
pca_f$rotation
summary(pca_f)
pca_f$x
?prcomp
summary(pca_f)
pca_f$x %>% as_tibble()
pca_f$x %>% as_tibble()
#variable analysis
source('01_setup.R')
pca_f$x %>% as_tibble()
data_pca <- pca_f$x %>% as_tibble()
data_pca70 <- data_pca %>% select(c(1:3))
#4 componenetes (>80% varianza explicada)
data_pca80 <- data_pca %>% select(c(1:4))
km_pca70 <- data_pca70 %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans")
km_pca70 <- data_pca70 %>% NbClust(method = "kmeans")
km_pca80 <- data_pca80 %>% NbClust(method = "kmeans")
track_features %>% select("track.id","genres") %>% mutate(km70 = factor(km_pca70$Best.partition),
km80 = factor(km_pca80$Best.partition))
results_pca <- track_features %>% select("track.id","genres") %>% mutate(km70 = factor(km_pca70$Best.partition),
km80 = factor(km_pca80$Best.partition))
h_pca70 <- data_pca70 %>% NbClust(method = "complete")
h_pca80 <- data_pca80 %>% NbClust(method = "complete")
results_pca <- results_pca %>% mutate(h70 = factor(h_pca70$Best.partition),
h80 = factor(h_pca80$Best.partition))
results_pca
results_pca %>% mutate(diff_km = abs(km70-km80),diff_h = abs(h70-h80))
results_pca %>% mutate(diffkm = abs(km70-km80),diffh = abs(h70-h80))
results_pca %>% mutate(diff_km = as.numeric(km70!=km80),diff_h = as.numeric(h70!=h80))
summary(results_pca)
results_pca %>% filter(km70 == 1) %>% group_by(genres) %>% count()
results_pca %>% filter(km70 == 2) %>% group_by(genres) %>% count()
results_pca %>% filter(km70 == 3) %>% group_by(genres) %>% count()
?nest
results_pca %>% nest(genres)
results_pca
summary(results_pca)
?geom_treemap
install.packages("treemapify")
library(treemapify)
#hacer treemaps
library('treemapify')
?geom_treemap
tree_test <- ggplot(data = results_pca) + geom_treemap(mapping = aes(area = results_pca$genres))
test_tree
tree_test
tree_test <- ggplot(data = results_pca) + geom_treemap(mapping = aes(area = genres))
tree_test
# track.id            genres          km70    km80    h70     h80
# Length:743         Length:743         1:312   1:118   1:381   1:706
# Class :character   Class :character   2:223   2:625   2:178   2: 37
# Mode  :character   Mode  :character   3: 77           3: 58
#                                       4: 94           4: 89
#                                       5: 37           5: 37
results_pca %>% group_by(genres)
# track.id            genres          km70    km80    h70     h80
# Length:743         Length:743         1:312   1:118   1:381   1:706
# Class :character   Class :character   2:223   2:625   2:178   2: 37
# Mode  :character   Mode  :character   3: 77           3: 58
#                                       4: 94           4: 89
#                                       5: 37           5: 37
results_pca %>% group_by(genres) %>% count()
# track.id            genres          km70    km80    h70     h80
# Length:743         Length:743         1:312   1:118   1:381   1:706
# Class :character   Class :character   2:223   2:625   2:178   2: 37
# Mode  :character   Mode  :character   3: 77           3: 58
#                                       4: 94           4: 89
#                                       5: 37           5: 37
tr_df <- results_pca %>% group_by(genres) %>% count()
tree_test <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n))
tree_test
tree_test <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n),fill = genres)
tree_test
tree_test <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n,fill = genres))
tree_test
install.packages("gg3D")
library("gg3D")
devtools::install_github("AckerDWM/gg3D")
# track.id            genres          km70    km80    h70     h80
# Length:743         Length:743         1:312   1:118   1:381   1:706
# Class :character   Class :character   2:223   2:625   2:178   2: 37
# Mode  :character   Mode  :character   3: 77           3: 58
#                                       4: 94           4: 89
#                                       5: 37           5: 37
tr_df <- results_pca %>% filter(km70==1) group_by(genres) %>% count()
# track.id            genres          km70    km80    h70     h80
# Length:743         Length:743         1:312   1:118   1:381   1:706
# Class :character   Class :character   2:223   2:625   2:178   2: 37
# Mode  :character   Mode  :character   3: 77           3: 58
#                                       4: 94           4: 89
#                                       5: 37           5: 37
tr_df <- results_pca %>% filter(km70==1) %>% group_by(genres) %>% count()
tree_test <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n,fill = genres))
tree_test
# track.id            genres          km70    km80    h70     h80
# Length:743         Length:743         1:312   1:118   1:381   1:706
# Class :character   Class :character   2:223   2:625   2:178   2: 37
# Mode  :character   Mode  :character   3: 77           3: 58
#                                       4: 94           4: 89
#                                       5: 37           5: 37
tr_df <- results_pca %>% filter(km70==1) %>% group_by(genres) %>% count()
km70_1_tree <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n,fill = genres))
tr_df <- results_pca %>% filter(km70==2) %>% group_by(genres) %>% count()
tr_df <- results_pca %>% filter(km70==2) %>% group_by(genres) %>% count()
km70_2_tree <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n,fill = genres))
tr_df <- results_pca %>% filter(km70==3) %>% group_by(genres) %>% count()
km70_3_tree <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n,fill = genres))
tr_df <- results_pca %>% filter(km70==4) %>% group_by(genres) %>% count()
km70_4_tree <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n,fill = genres))
tr_df <- results_pca %>% filter(km70==5) %>% group_by(genres) %>% count()
km70_5_tree <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n,fill = genres))
tr_df <- results_pca  %>% group_by(genres) %>% count()
data_0_tree <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n,fill = genres))
grid.arrange(data_0_tree,km70_1_tree,km70_2_tree,km70_3_tree,km70_4_tree,km70_5_tree,ncol = 2,nrow = 3)
