edm.results %>% filter(km == 1) %>% left_join(track_part_final, by = 'track.id') %>% select(-track.id,-km,-name,-genres) %>% pivot_longer(everything()) %>% mutate(name = as.factor(name)) %>% ggplot(aes(value, color = name)) + geom_density()+theme_bw()
edm.results %>% filter(km == 2) %>% left_join(track_part_final, by = 'track.id') %>% select(-track.id,-km,-name,-genres) %>% pivot_longer(everything()) %>% mutate(name = as.factor(name)) %>% ggplot(aes(value, color = name)) + geom_density()+theme_bw()
gap <- track_part_final %>% filter(genres == 'edm') %>% select(-track.id,-genres,-instrumentalness) %>% clusGap(FUN = kmeans, K.max = 15)
plot(gap)
edm.results %>% filter(km == 1) %>% left_join(track_part_final, by = 'track.id') %>% select(-track.id,-km,-name,-genres) %>% pivot_longer(everything()) %>% mutate(name = as.factor(name)) %>% ggplot(aes(value, color = name)) + geom_density()+theme_bw()
edm.results %>% filter(km == 2) %>% left_join(track_part_final, by = 'track.id') %>% select(-track.id,-km,-name,-genres) %>% pivot_longer(everything()) %>% mutate(name = as.factor(name)) %>% ggplot(aes(value, color = name)) + geom_density()+theme_bw()
C_GK<- track_part_final %>% filter(genres == 'edm') %>% select(-track.id,-genres,-instrumentalness,-valence) %>% Fclust(2,'GK')
plot_gk <- plot.fclust(C_GK,ucex = TRUE, pca = FALSE)
C_GK$H
C_GK$U
C_GK %>% mutate(dif = abs(U[1]-U[2]))
diff <- abs(C_GK$U[1,]-C_GK$U[2,])
diff
diff <- abs(C_GK$U[1]-C_GK$U[2])
diff
diff <- abs(C_GK$U[,1]-C_GK$U[,2])
diff
diff>0.2
sum(as.numeric(diff>0.2))
sum(as.numeric(diff<0.2))
sum(as.numeric(diff<0.3))
sum(as.numeric(diff<0.4))
sum(as.numeric(diff<0.5))
sum(as.numeric(diff<0.9))
sum(as.numeric(diff<0.8))
sum(as.numeric(diff<0.6))
C_GK$U
diff <- abs(C_GK$U[,1]-C_GK$U[,2])
diff
C_GK$U
C_GK$clus
C_GK %>% Fclust.index()
C_GK %>% Fclust.compare()
Fclust.compare(VC = C_GK$clus[2,],U = C_GK$U)
C_GK$clus[2,]
Fclust.compare(VC = C_GK$clus[,2],U = C_GK$U)
C_GK$clus[,2]
Fclust.compare(VC = as.vector(C_GK$clus[,2]),U = C_GK$U)
?prcomp
pca_edm <- track_part_final %>% filter(genres == edm) %>% select(-track.id,-genres) %>% prcomp()
pca_edm <- track_part_final %>% filter(genres == 'edm') %>% select(-track.id,-genres) %>% prcomp()
pca_edm$sdev
pca_edm$rotation
summary(pca_edm)
pca_edm$x
pca_edm$x %>% select(PC1,PC2,PC3) %>% Fclust()
pca_edm$x %>% select(PC1,PC2,PC3) %>% kmeans(2)
pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3) %>% kmeans(2)
pca_edm$x %>% as.tibble() %>% select(PC1,PC2) %>% kmeans(2)
pca_edm$x %>% as.tibble() %>% select(PC1,PC2) %>% ggplot() %>% geom_point()
pca_edm$x %>% as.tibble() %>% select(PC1,PC2) %>% ggplot(aes(PC1,PC2)) %>% geom_point()
pca_edm$x %>% as.tibble() %>% select(PC1,PC2) %>% ggplot(aes(PC1,PC2)) %>% geom_point()
pca_edm$x %>% as.tibble() %>% select(PC1,PC2) %>% ggplot(aes(PC1,PC2)) + geom_point()
pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3) %>% ggplot(aes(PC1,PC2,PC3)) + geom_point()
install.packages(gg3D)
install.packages('gg3D')
#3d ggplot
library('gg3D')
?plotly
install.packages('rayshader')
library(rayshader)
pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3) %>% plot()
pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3) %>% plot_3d()
pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3) %>% persp()
pca_data <- pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3)
persp(x = pca_data$PC1,y= pca_data$PC2,z = pca_data$PC3)
install.packages('plot3D')
library('plot3D')
scatter3D(pca_data$PC1, pca_data$PC2, pca_data$PC3)
scatter3D(pca_data$PC1, pca_data$PC2, pca_data$PC3, colvar = NULL)
scatter3D(pca_data$PC1, pca_data$PC2, pca_data$PC3, colvar = NULL, col = 'blue', pch = 19, cex = 15)
scatter3D(pca_data$PC1, pca_data$PC2, pca_data$PC3, colvar = NULL, col = 'blue', pch = 19, cex = 1)
scatter3D(pca_data$PC1, pca_data$PC2, pca_data$PC3, colvar = NULL, col = 'blue', pch = 19, cex = 1,theta = 15,phi = 20)
scatter3D(pca_data$PC1, pca_data$PC2, pca_data$PC3, colvar = NULL, col = 'blue', pch = 19, cex = 1,theta = 15,phi = 45)
scatter3D(pca_data$PC1, pca_data$PC2, pca_data$PC3, colvar = NULL, col = 'blue', pch = 19, cex = 1,theta = 30,phi = 30)
scatter3D(pca_data$PC1, pca_data$PC2, pca_data$PC3, colvar = NULL, col = 'blue', pch = 19, cex = 1,theta =25,phi = 30)
scatter3D(pca_data$PC1, pca_data$PC2, pca_data$PC3, colvar = NULL,  phi = 0, bty = "g",  type = "h",
ticktype = "detailed", pch = 19, cex = 0.5)
scatter3D(pca_data$PC1, pca_data$PC2, pca_data$PC3, colvar = NULL,  phi = 0, theta = 90, bty = "g",  type = "h",
ticktype = "detailed", pch = 19, cex = 0.5)
scatter3D(pca_data$PC1, pca_data$PC2, pca_data$PC3, colvar = NULL,  phi = 0, bty = "g",  type = "h",
ticktype = "detailed", pch = 19, cex = 0.5)
scatter3D(pca_data$PC1, pca_data$PC2, pca_data$PC3,  phi = 0, bty = "g",  type = "h",
ticktype = "detailed", pch = 19, cex = 0.5)
scatter3D_fancy(pca_data$PC1, pca_data$PC2, pca_data$PC3,  phi = 0, bty = "g",  type = "h",
ticktype = "detailed", pch = 19, cex = 0.5)
scatter3D_fancy <- function(x, y, z,..., colvar = z)
{
panelfirst <- function(pmat) {
XY <- trans3D(x, y, z = rep(min(z), length(z)), pmat = pmat)
scatter2D(XY$x, XY$y, colvar = colvar, pch = ".",
cex = 2, add = TRUE, colkey = FALSE)
XY <- trans3D(x = rep(min(x), length(x)), y, z, pmat = pmat)
scatter2D(XY$x, XY$y, colvar = colvar, pch = ".",
cex = 2, add = TRUE, colkey = FALSE)
}
scatter3D(x, y, z, ..., colvar = colvar, panel.first=panelfirst,
colkey = list(length = 0.5, width = 0.5, cex.clab = 0.75))
}
scatter3D_fancy(pca_data$PC1, pca_data$PC2, pca_data$PC3,  phi = 0, bty = "g",  type = "h",
ticktype = "detailed", pch = 19, cex = 0.5)
scatter3D_fancy(pca_data$PC1, pca_data$PC2, pca_data$PC3,  phi = 0, bty = "g", pch = 19, cex = 0.5)
scatter3D_fancy(pca_data$PC1, pca_data$PC2, pca_data$PC3,  phi = 25, pch = 19, cex = 0.5)
scatter3D_fancy(pca_data$PC1, pca_data$PC2, pca_data$PC3,  phi = 25, bty = "g", pch = 19, cex = 0.5)
scatter3D_fancy(pca_data$PC1, pca_data$PC2, pca_data$PC3,  colvar = NULL, phi = 25, bty = "g", pch = 19, cex = 0.5)
pca_data <- pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3) %>% ggplot(aes(PC1,PC2,color = PC3)) + geom_point() + theme_bw()
pca_data <- pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3) %>% ggplot(aes(PC1,PC2,color = PC3)) + geom_point() + theme_bw()
pca_data <- pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3) %>% ggplot(aes(PC1,PC2,color = PC3)) + geom_point() + theme_bw()
pca_data <- pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3) %>% ggplot(aes(PC1,PC2)) + geom_point() + theme_bw()
pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3) %>% ggplot(aes(PC1,PC2,color = PC3)) + geom_point() + theme_bw()
pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3) %>% ggplot(aes(PC1,PC3)) + geom_point() + theme_bw()
pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3) %>% ggplot(aes(PC2,PC3)) + geom_point() + theme_bw()
PCA1
PCA1 <-pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3) %>% ggplot(aes(PC1,PC2)) + geom_point() + theme_bw()
pca_df <- pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3)
PCA1 <-pca_df %>% ggplot(aes(PC1,PC2)) + geom_point() + theme_bw()
PCA1
C_GK<- pca_df %>% Fclust(2,'GK')
C_GK$h
C_GK$H
edm.clust <- pca_data %>% NbClust(method = 'kmeans',distance = 'euclidean')
edm.clust <- pca_data %>% kmeans(2)
edm.clust <- pca_df %>% kmeans(2)
edm.results <- edm %>% select("track.id") %>% mutate(km = as.factor(edm.clust$Best.partition))
edm.results <- edm %>% select("track.id") %>% mutate(km = as.factor(edm.clust$cluster))
edm.tracks <- get_tracks(edm.results$track.id) %>% select("name") %>% mutate(track.id = edm$track.id)
edm.tracks <- get_tracks(edm.results$track.id) %>% select("name") %>% mutate(track.id = edm$track.id)
edm.results <- edm.results %>% left_join(edm.tracks)
edm.results %>% filter(km == 2) %>% left_join(track_part_final, by = 'track.id') %>% select(-track.id,-km,-name,-genres) %>% pivot_longer(everything()) %>% mutate(name = as.factor(name)) %>% ggplot(aes(value, color = name)) + geom_density()+theme_bw()
edm.tracks
edm.results %>% filter(km == 1) %>% select(name) %>% print(50)
edm.results %>% filter(km == 2) %>% select(name) %>% print(50)
plot_gk <- plot.fclust(C_GK,ucex = TRUE, pca = TRUE)
edm <- track_part_final %>% filter(genres == "edm") %>% select(-genres)
#particion con PCA
pca_edm <- track_part_final %>% filter(genres == 'edm') %>% select(-track.id,-genres) %>% prcomp()
summary(pca_edm)
pca_df <- pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3)
PCA1 <-pca_df %>% ggplot(aes(PC1,PC2)) + geom_point() + theme_bw()
PCA1
#sapply(edm, sd)
#danceability           energy         loudness      speechiness     acousticness
#0.11463229       0.09392507       0.04686151       0.06960510       0.11831160
#instrumentalness         liveness          valence            tempo           fifths
#      0.36485364       0.17446952       0.25143273       0.07270524       0.13652581
#instrumentalness y valence
edm.clust <- track_part_final %>% filter(genres == 'edm') %>% select(-tack.id,-genres) %>% kmeans(2)
edm <- track_part_final %>% filter(genres == "edm") %>% select(-genres)
#particion con PCA
pca_edm <- track_part_final %>% filter(genres == 'edm') %>% select(-track.id,-genres) %>% prcomp()
summary(pca_edm)
pca_df <- pca_edm$x %>% as.tibble() %>% select(PC1,PC2,PC3)
PCA1 <-pca_df %>% ggplot(aes(PC1,PC2)) + geom_point() + theme_bw()
PCA1
#sapply(edm, sd)
#danceability           energy         loudness      speechiness     acousticness
#0.11463229       0.09392507       0.04686151       0.06960510       0.11831160
#instrumentalness         liveness          valence            tempo           fifths
#      0.36485364       0.17446952       0.25143273       0.07270524       0.13652581
#instrumentalness y valence
edm.clust <- track_part_final %>% filter(genres == 'edm') %>% select(-track.id,-genres) %>% kmeans(2)
edm.results <- edm %>% select("track.id") %>% mutate(km = as.factor(edm.clust$cluster))
edm.tracks <- get_tracks(edm.results$track.id) %>% select("name") %>% mutate(track.id = edm$track.id)
edm.results <- edm.results %>% left_join(edm.tracks)
edm.results %>% filter(km == 1) %>% left_join(track_part_final, by = 'track.id') %>% select(-track.id,-km,-name,-genres) %>% pivot_longer(everything()) %>% mutate(name = as.factor(name)) %>% ggplot(aes(value, color = name)) + geom_density()+theme_bw()
edm.results %>% filter(km == 2) %>% left_join(track_part_final, by = 'track.id') %>% select(-track.id,-km,-name,-genres) %>% pivot_longer(everything()) %>% mutate(name = as.factor(name)) %>% ggplot(aes(value, color = name)) + geom_density()+theme_bw()
# gap <- track_part_final %>% filter(genres == 'edm') %>% select(-track.id,-genres,-instrumentalness) %>% clusGap(FUN = kmeans, K.max = 15)
#
# plot(gap)
C_GK<- pca_df %>% Fclust(2,'GK')
plot_gk <- plot.fclust(C_GK,ucex = TRUE, pca = TRUE)
edm.results %>% filter(km == 2) %>% select(name) %>% print(50)
summary(pca_edm)
pca_edm$rotation
plot_gk <- plot.fclust(C_GK,ucex = TRUE, pca = TRUE)
source('01_setup.R')
load('track_part_final.RData')
gap <- track_part_final %>% filter(genres == 'edm') %>% select(-track.id,-genres,-instrumentalness) %>% clusGap(FUN = kmeans, K.max = 15)
plot(gap)
plot_gap <- plot(gap)
plot_gap
plot(gap)
?plot
plot(gap, xlab = 'número de clusters', title(Índice Gap))
plot(gap, xlab = 'número de clusters', title('Índice Gap'))
plot(gap, xlab = 'número de clusters')
plot(gap, xlab = 'número de clusters')
gap <- track_part_final %>% filter(genres == 'edm') %>% select(-track.id,-genres) %>% clusGap(FUN = kmeans, K.max = 8)
gap <- track_part_final %>% filter(genres == 'edm') %>% select(-track.id,-genres) %>% clusGap(FUN = kmeans, K.max = 8)
plot(gap, xlab = 'número de clusters')
plot(gap, xlab = 'número de clusters')
pca_edm$rotation
pca_edm$sdev
pca_edm
as.tibble(pca_edm$sdev)
as.tibble(pca_edm$sdev) %>% mutate(PCA = names(pca_edm))
names(pca_edm)
names(pca_edm$sdev)
names(pca_edm$rotation)
names(pca_edm$center)
names(pca_edm$scale)
names(pca_edm$x)
as.tibble(pca_edm$sdev) %>% mutate(PCA = c('PCA1', 'PCA2', 'PCA3', 'PCA4', 'PCA5', 'PCA6', 'PCA7', 'PCA8', 'PCA9', 'PCA10'))
plot_pca <- as.tibble(pca_edm$sdev) %>% mutate(PCA = c('PCA1', 'PCA2', 'PCA3', 'PCA4', 'PCA5', 'PCA6', 'PCA7', 'PCA8', 'PCA9', 'PCA10'))
ggplot(plot_pca, aes(PCA,value)) + geom_point() + geom_line() + theme_bw()
plot(gap, xlab = 'número de clusters')
plot_pca <- as.tibble(pca_edm$sdev) %>% mutate(PCA = c('PCA1', 'PCA2', 'PCA3', 'PCA4', 'PCA5', 'PCA6', 'PCA7', 'PCA8', 'PCA9', 'PCA10'))
ggplot(plot_pca, aes(PCA,value)) + geom_point() + geom_line() + theme_bw()
plot_pca <- as.tibble(pca_edm$sdev) %>% mutate(PCA = c('PCA1', 'PCA2', 'PCA3', 'PCA4', 'PCA5', 'PCA6', 'PCA7', 'PCA8', 'PCA9', 'PCA10'))
ggplot(plot_pca, aes(PCA,value)) + geom_point() + geom_line() + theme_bw()
plot_pca
ggplot(plot_pca, aes(PCA,value)) + geom_point() + theme_bw()
plot_pca <- as.tibble(pca_edm$sdev) %>% mutate(PCA = c(1:10))
ggplot(plot_pca, aes(PCA,value)) + geom_point() + theme_bw()
summary(pca_edm)
pca_edm$rotation
track_part_final %>% filter(genres == 'edm') %>% ggplot(aes(liveness)) + geom_density() + theme_bw()
edm_df %>% select(PCA1,PCA2) %>% NbClust(method = 'kmeans', distance = 'euclidean',index='ch')
pca_km <- pca_df %>% select(PCA1,PCA2) %>% NbClust(method = 'kmeans', distance = 'euclidean',index='ch')
pca_km <- pca_df %>% select(PC1,PC2) %>% NbClust(method = 'kmeans', distance = 'euclidean',index='ch')
pca_comp <- pca_df %>% select(PC1,PC2) %>% NbClust(method = 'complete', distance = 'euclidean',index='ch')
edm.results <- edm %>% select("track.id") %>% mutate(km = as.factor(pca_km$Best.partition), comp = as.factor(pca_comp$Best.partition))
edm.results_pca <- edm %>% select("track.id") %>% mutate(km = as.factor(pca_km$Best.partition), comp = as.factor(pca_comp$Best.partition))
edm.results_pca
graphics_pca <- edm.results_pca %>% left_join(track_part_final)
graphics_pca %>% select(-track.id) %>% ggplot(aes(instrumentalness,valence, color = km)) +geom_point()+ theme_bw()
track_part_final %>% filter(genres == 'edm') %>% ggplot(aes(liveness)) + geom_density() + theme_bw()
pca_km <- pca_df %>% select(PC1,PC2) %>% NbClust(method = 'kmeans', distance = 'euclidean',index='ch', max.nc = 2)
pca_comp <- pca_df %>% select(PC1,PC2) %>% NbClust(method = 'complete', distance = 'euclidean',index='ch')
edm.results_pca <- edm %>% select("track.id") %>% mutate(km = as.factor(pca_km$Best.partition), comp = as.factor(pca_comp$Best.partition))
graphics_pca <- edm.results_pca %>% left_join(track_part_final)
graphics_pca %>% select(-track.id) %>% ggplot(aes(instrumentalness,valence, color = km)) +geom_point()+ theme_bw()
# pca_km <- pca_df %>% select(PC1,PC2) %>% NbClust(method = 'kmeans', distance = 'euclidean',index='ch', max.nc = 2)
# pca_comp <- pca_df %>% select(PC1,PC2) %>% NbClust(method = 'complete', distance = 'euclidean',index='ch')
# edm.results_pca <- edm %>% select("track.id") %>% mutate(km = as.factor(pca_km$Best.partition), comp = as.factor(pca_comp$Best.partition))
# graphics_pca <- edm.results_pca %>% left_join(track_part_final)
# graphics_pca %>% select(-track.id) %>% ggplot(aes(instrumentalness,valence, color = km)) +geom_point()+ theme_bw()
C_GK<- pca_df %>% Fclust(2,'GK')
plot_gk <- plot.fclust(C_GK,ucex = TRUE, pca = FALSE)
C_GK$U
as.tibble(C_GK$U)
as.tibble(C_GK$U) %>% mutate(data = c(1:nrow(pca_df)))
as.tibble(C_GK$U) %>% mutate(data = c(1:nrow(pca_df))) %>% ggplot(aes(data,Clus 1, Clus 2))
as.tibble(C_GK$U) %>% mutate(data = c(1:nrow(pca_df))) %>% ggplot(aes(data,'Clus 1','Clus 2'))
ggplot(tracks_genre_features %>%
distinct(track.id, key, mode), # quitar repetidas
aes(as.factor(key), fill = factor(mode))) +
geom_bar(position = "dodge") + # dodge para que salgan una al lado de otro
labs(x = "Key", fill = "Mode") + # cambiar eje x y tit leyenda
scale_fill_brewer(palette = "Dark2") + # para que veas como se hace por si te apetece
# hay más paletas aquí https://r-graph-gallery.com/38-rcolorbrewers-palettes.html
scale_x_discrete(labels = c("Do",
"Do#/Reb",
"Re",
"Re#/Mib",
"Mi",
"Fa",
"Fa#/Solb",
"Sol",
"Sol#/Lab",
"La",
"La#/Sib",
"Si")) +
theme_bw()
?facet_grid
as.tibble(C_GK$U) %>% mutate(data = c(1:nrow(pca_df))) %>% ggplot(aes(data,'Clus 1','Clus 2')) + geom_bars
as.tibble(C_GK$U) %>% mutate(data = c(1:nrow(pca_df))) %>% ggplot(aes(data,'Clus 1','Clus 2')) + geom_bar()
as.tibble(C_GK$U) %>% mutate(data = c(1:nrow(pca_df))) %>% ggplot(aes(data,'Clus 1','Clus 2')) + geom_bar(aes(data,'Clus 1'))
as.tibble(C_GK$U) %>% mutate(data = c(1:nrow(pca_df))) %>% ggplot(aes(data,'Clus 1','Clus 2')) + geom_bar(aes('Clus 1'))
as.tibble(C_GK$U) %>% mutate(data = c(1:nrow(pca_df))) %>% ggplot('Clus 1')) + geom_bar()
as.tibble(C_GK$U) %>% mutate(data = c(1:nrow(pca_df))) %>% ggplot(aes('Clus 1')) + geom_bar()
df <- C_GK$U %>% as.tibble() %>% mutate(data = factor(c(1:nrow(pca_df))))
df
df <- C_GK$U %>% as.tibble() %>% mutate(data = factor(c(1:nrow(pca_df))))
# reshape to have the stackable values and plot
melt(df,
id.vars = c("data", "misidentified", "missed", "Total"),
measure.vars = c("Clus 1", "Clus 2")) %>%
mutate(x_axis_text = paste(.$True.species, "(Total = ",  .$Total, ")") ) %>%
ggplot(aes(x = x_axis_text, y = value, fill = variable) ) +
geom_bar(stat = "identity") +
coord_flip()
install.packages('reshape2')
?melt_csv
fuzzy.edm.df <- C_GK$U %>% as.tibble() %>% mutate(data = factor(c(1:nrow(pca_df))))
save(fuzzy.edm.df, file = 'fuzzy_edm_df.Rdata')
source('01_setup.R')
load('track_part_final.RData')
subset <- track_part_final %>% filter(genres == c("rock","permanent wave"))
pca_s <- subset %>% select(-track.id,-genres) %>% prcomp()
pca_s$rotation
summary(pca_s)
subset %>% select(-track.id,-genres) %>% NbClust(method = 'kmeans', distance = 'euclidean', index = 'ch')
km <- subset %>% select(-track.id,-genres) %>% NbClust(method = 'kmeans', distance = 'euclidean', index = 'silhouette')
km$Best.nc
comp <- subset %>% select(-track.id,-genres) %>% NbClust(method = 'complete', distance = 'euclidean', index = 'ch')
comp$Best.nc
comp <- subset %>% select(-track.id,-genres) %>% NbClust(method = 'complete', distance = 'euclidean', index = 'silhouette')
comp$Best.nc
results <- subset %>% select(track.id) %>% mutate(km = as.factor(km$Best.partition),comp = as.factor(comp$Best.partition))
subset <- track_part_final %>% filter(genres == c("rock","permanent wave"))
pca_s <- subset %>% select(-track.id,-genres) %>% prcomp()
km <- subset %>% select(-track.id,-genres) %>% NbClust(method = 'kmeans', distance = 'euclidean', index = 'silhouette')
comp <- subset %>% select(-track.id,-genres) %>% NbClust(method = 'complete', distance = 'euclidean', index = 'silhouette')
results <- subset %>% select(track.id) %>% mutate(km = as.factor(km$Best.partition),comp = as.factor(comp$Best.partition))
km_plot <- results %>% ggplot(aes(km,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'K means') +
facet_grid(~genres)
comp_plot <- results %>% ggplot(aes(comp,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'Complete') +
facet_grid(~genres)
km_plot
subset <- track_part_final %>% filter(genres == c("rock","permanent wave"))
pca_s <- subset %>% select(-track.id,-genres) %>% prcomp()
km <- subset %>% select(-track.id,-genres) %>% NbClust(method = 'kmeans', distance = 'euclidean', index = 'silhouette')
comp <- subset %>% select(-track.id,-genres) %>% NbClust(method = 'complete', distance = 'euclidean', index = 'silhouette')
results <- subset %>% select(track.id,genres) %>% mutate(km = as.factor(km$Best.partition),comp = as.factor(comp$Best.partition))
km_plot <- results %>% ggplot(aes(km,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'K means') +
facet_grid(~genres)
comp_plot <- results %>% ggplot(aes(comp,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'Complete') +
facet_grid(~genres)
km_plot
comp_plot
comp_plot <- results %>% distinct(track.id) %>% ggplot(aes(comp,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'Complete') +
facet_grid(~genres)
km_plot
comp_plot
results %>% filter(km == 2)
?distinct
comp_plot <- results %>% distinct(.keep_all = TRUE) %>% ggplot(aes(comp,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'Complete') +
facet_grid(~genres)
comp_plot
km_plot <- results %>% distinct(.keep_all = TRUE)  %>% ggplot(aes(km,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'K means') +
facet_grid(~genres)
comp_plot <- results %>% distinct(.keep_all = TRUE) %>% ggplot(aes(comp,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'Complete') +
facet_grid(~genres)
km_plot
comp_plot
km_plot1 <- results %>% distinct(.keep_all = TRUE)  %>% ggplot(aes(km,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'K means') +
facet_grid(~genres)
km_plot2 <- results %>% ggplot(aes(km,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'K means') +
facet_grid(~genres)
comp_plot <- results %>% distinct(.keep_all = TRUE) %>% ggplot(aes(comp,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'Complete') +
facet_grid(~genres)
km_plot1
km_plot2
results %>% filter(km == 2) %>% distinct(track.id, .keep_all = TRUE)
results %>% filter(km == 2)
comp <- subset %>% select(-track.id,-genres) %>% NbClust(method = 'complete', distance = 'euclidean', index = 'ch')
results <- subset %>% select(track.id,genres) %>% mutate(km = as.factor(km$Best.partition),comp = as.factor(comp$Best.partition))
km_plot1 <- results %>% distinct(.keep_all = TRUE)  %>% ggplot(aes(km,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'K means') +
facet_grid(~genres)
comp_plot <- results %>% distinct(.keep_all = TRUE) %>% ggplot(aes(comp,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'Complete') +
facet_grid(~genres)
km_plot2
comp_plot
km_plot1
km_plot2
comp_plot
results %>% filter(km == 2) %>% select(track.id) %>% get_tracks() %>% select(names)
#SPOTIFY
library('spotifyr')
Sys.setenv(SPOTIFY_CLIENT_ID = '44855249207d40619183b073132a6407')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2296850888224ff0bb4e35ad23962578')
access_token <- get_spotify_access_token()
#autorizar a coger datos de usuario
aut <- get_spotify_authorization_code()
results %>% filter(km == 2) %>% select(track.id) %>% get_tracks() %>% select(names)
results %>% filter(km == 2) %>% select(track.id)
results %>% filter(km == 2) %>% select(track.id) %>% as.vector() %>% get_tracks() %>% select(names)
results %>% filter(km == 2) %>% select(track.id) %>% as.vector()
results %>% filter(km == 2) %>% select(track.id) %>% as.character() %>% get_tracks() %>% select(names)
track_name %>% as.character() %>% get_tracks() %>% select(names)
track_name <- results %>% filter(km == 2) %>% select(track.id)
track_name <- results %>% filter(km == 2) %>% select(track.id) %>% as.vector()
track_name <- results %>% filter(km == 2) %>% select(track.id) %>% as.list()
track_name %>% get_tracks() %>% select(names)
track_name <- results %>% filter(km == 2) %>% select(track.id)
track_name$track.id %>% get_tracks() %>% select(names)
track_name$track.id %>% get_tracks()
track_name$track.id %>% get_tracks() %>% select(name)
track_name <- results %>% filter(km == 1) %>% select(track.id)
track_name$track.id %>% get_tracks() %>% select(name)
km <- subset %>% select(-track.id,-genres,-fifths) %>% NbClust(method = 'kmeans', distance = 'euclidean', index = 'silhouette')
comp <- subset %>% select(-track.id,-genres,-fifths) %>% NbClust(method = 'complete', distance = 'euclidean', index = 'ch')
results <- subset %>% select(track.id,genres) %>% mutate(km = as.factor(km$Best.partition),comp = as.factor(comp$Best.partition))
km_plot1 <- results %>% distinct(.keep_all = TRUE)  %>% ggplot(aes(km,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'K means') +
facet_grid(~genres)
comp_plot <- results %>% distinct(.keep_all = TRUE) %>% ggplot(aes(comp,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'Complete') +
facet_grid(~genres)
km_plot2
km <- subset %>% select(-track.id,-genres,-fifths,-speechiness,-liveness,-acousticness) %>% NbClust(method = 'kmeans', distance = 'euclidean', index = 'silhouette')
comp <- subset %>% select(-track.id,-genres,-fifths) %>% NbClust(method = 'complete', distance = 'euclidean', index = 'ch')
results <- subset %>% select(track.id,genres) %>% mutate(km = as.factor(km$Best.partition),comp = as.factor(comp$Best.partition))
km_plot1 <- results %>% distinct(.keep_all = TRUE)  %>% ggplot(aes(km,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'K means') +
facet_grid(~genres)
km_plot2 <- results %>% ggplot(aes(km,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'K means') +
facet_grid(~genres)
km_plot1
km_plot2
comp_plot
track_name <- results %>% filter(km == 1) %>% select(track.id)
track_name$track.id %>% get_tracks() %>% select(name)
km_plot1
track_name$track.id %>% get_tracks() %>% select(name)
km <- subset %>% select(-track.id,-genres,-fifths,-speechiness,-liveness,-acousticness,-danceability) %>% NbClust(method = 'kmeans', distance = 'euclidean', index = 'silhouette')
comp <- subset %>% select(-track.id,-genres,-fifths) %>% NbClust(method = 'complete', distance = 'euclidean', index = 'ch')
results <- subset %>% select(track.id,genres) %>% mutate(km = as.factor(km$Best.partition),comp = as.factor(comp$Best.partition))
km_plot1 <- results %>% distinct(.keep_all = TRUE)  %>% ggplot(aes(km,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'K means') +
facet_grid(~genres)
km_plot2 <- results %>% ggplot(aes(km,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'K means') +
facet_grid(~genres)
km_plot1
km_plot2
track_name <- results %>% filter(km == 1) %>% select(track.id)
track_name$track.id %>% get_tracks() %>% select(name)
km <- subset %>% select(-track.id,-genres) %>% NbClust(method = 'kmeans', distance = 'euclidean', index = 'silhouette')
comp <- subset %>% select(-track.id,-genres,-fifths) %>% NbClust(method = 'complete', distance = 'euclidean', index = 'ch')
results <- subset %>% select(track.id,genres) %>% mutate(km = as.factor(km$Best.partition),comp = as.factor(comp$Best.partition))
km_plot1 <- results %>% distinct(.keep_all = TRUE)  %>% ggplot(aes(km,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'K means') +
facet_grid(~genres)
comp_plot <- results %>% distinct(.keep_all = TRUE) %>% ggplot(aes(comp,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'Complete') +
facet_grid(~genres)
km_plot2
km <- subset %>% select(-track.id,-genres) %>% NbClust(method = 'kmeans', distance = 'euclidean', index = 'ch')
results <- subset %>% select(track.id,genres) %>% mutate(km = as.factor(km$Best.partition),comp = as.factor(comp$Best.partition))
km_plot1 <- results %>% distinct(.keep_all = TRUE)  %>% ggplot(aes(km,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'K means') +
facet_grid(~genres)
comp_plot <- results %>% distinct(.keep_all = TRUE) %>% ggplot(aes(comp,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'Complete') +
facet_grid(~genres)
km_plot2
subset <- track_part_final %>% filter(genres == c("rock","permanent wave"))
pca_s <- subset %>% select(-track.id,-genres) %>% prcomp()
km <- subset %>% select(-track.id,-genres) %>% NbClust(method = 'kmeans', distance = 'euclidean', index = 'ch')
comp <- subset %>% select(-track.id,-genres) %>% NbClust(method = 'complete', distance = 'euclidean', index = 'ch')
results <- subset %>% select(track.id,genres) %>% mutate(km = as.factor(km$Best.partition),comp = as.factor(comp$Best.partition))
km_plot1 <- results %>% distinct(.keep_all = TRUE)  %>% ggplot(aes(km,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'K means') +
facet_grid(~genres)
km_plot2 <- results %>% ggplot(aes(km,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'K means') +
facet_grid(~genres)
comp_plot <- results %>% distinct(.keep_all = TRUE) %>% ggplot(aes(comp,group = genres, fill = genres)) + geom_bar()+theme_bw() +
labs(title = 'Complete') +
facet_grid(~genres)
km_plot1
km_plot2
comp_plot
track_name <- results %>% filter(km == 1) %>% select(track.id)
track_name$track.id %>% get_tracks() %>% select(name)
track_name <- results %>% filter(km == 3) %>% select(track.id)
track_name$track.id %>% get_tracks() %>% select(name)
track_name$track.id %>% get_tracks() %>% select(id,name) %>% mutate(track.id == id) %>% right_join(track_name)
track_name <- results %>% filter(km == 3) %>% select(track.id,genres)
track_name$track.id %>% get_tracks() %>% select(id,name) %>% mutate(track.id == id) %>% right_join(track_name)
track_name$track.id %>% get_tracks() %>% select(id,name) %>% mutate(track.id = id) %>% right_join(track_name)
track_name <- results %>% filter(km == 1) %>% select(track.id,genres)
track_name$track.id %>% get_tracks() %>% select(id,name) %>% mutate(track.id = id) %>% right_join(track_name)
results %>% filter(km == 1) %>% select(track.id,genres) %>% summary()
results %>% filter(km == 1) %>% summary()
results %>% filter(km == 1) %>% select(track.id,genres) %>% left_join(track_part_final) %>% summary()
results %>% filter(km == 1) %>% select(track.id,genres) %>% left_join(track_part_final) %>% sapply(var)
results %>% filter(km == 2) %>% select(track.id,genres) %>% left_join(track_part_final) %>% sapply(var)
results %>% filter(km == 3) %>% select(track.id,genres) %>% left_join(track_part_final) %>% sapply(var)
results %>% select(track.id,genres) %>% left_join(track_part_final) %>% sapply(var)
track_name$track.id %>% get_tracks() %>% select(id,name) %>% mutate(track.id = id) %>% right_join(track_name)
?lanjfaf
?kruskal.test
test1 <- results %>% left_join(track_part_final)
kruskal.test(test1$fifths,test1$km)
kruskal.test(test1$fifths,test1$genres)
kruskal.test(test1$danceability,test1$genres)
kruskal.test(test1$energy,test1$genres)
kruskal.test(test1$loudness,test1$genres)
kruskal.test(test1$speechiness,test1$genres)
kruskal.test(test1$acousticness,test1$genres)
kruskal.test(test1$instrumentalness,test1$genres)
kruskal.test(test1$liveness,test1$genres)
kruskal.test(test1$valence,test1$genres)
kruskal.test(test1$tempo,test1$genres)
kruskal.test(test1$fifths,test1$km)
kruskal.test(test1$tempo,test1$km)
kruskal.test(test1$valence,test1$km)
kruskal.test(test1$liveness,test1$km)
kruskal.test(test1$danceability,test1$km)
kruskal.test(test1 %>% select(-track.id,-genres,-km,-comp),test1$km)
kruskal.test(test1 %>% select(-track.id,-genres,-km,-comp),test1$genres)
kruskal.test(test1 %>% select(-track.id,-genres,-km,-comp),test1$km)
test1 <- results %>% left_join(track_part_final)
kruskal.test(test1 %>% select(-track.id,-genres,-km,-comp),test1$km)
install.packages('TOASTER')
