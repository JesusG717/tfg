# #get genre
# tracks_and_artist <- tracks %>%
#   select(track.id, track.artists) %>%
#   unnest(track.artists) %>%
#   select(track.id, id) %>%
#   rename(artist.id = id)
# #get_artists limit is 50
# artists_info <- get_artists(tracks_and_artist[1:50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
# for (i in 2:floor(nrow(tracks_and_artist)/50)) {
#   aux <- get_artists(tracks_and_artist[(i-1)*50:(i-1)*50+50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
#   artists_info <- bind_rows(artists_info,aux)
# }
# save(artists_info, file ="artists_info.RData")
# glimpse(artists_info)
# artists_info <- artists_info %>% select(genres, id) %>%  rename(artist.id = id)
# artists_info %>% drop_na() %>% unnest(genres)
# glimpse(artists_info)
# tracks_and_genres <- inner_join(tracks_and_artist, artists_info)  %>% drop_na() %>% unnest(genres)
# tracks_and_genres %>% group_by(genres) %>% count() %>% arrange(desc(n))
# # para filtrar algunos generos
# tracks_and_genres %>% filter(genres %in% c("rock", "alternative rock"))
# # para hacer que cada genero sea una columna
# tracks_and_genres %>% select(-artist.id) %>% distinct() %>% mutate(value = TRUE) %>% pivot_wider(names_from = genres, values_from = value, values_fill = FALSE)
#
#
# #tengo en tracks_and_genres los tracks con su genero asociado, mientras que en tracks tengo los tracks con sus ids
# tracks_genre_features <- left_join(tracks_and_genres,tracks,)
# tracks_genre_features <- select(tracks_genre_features,c(1:15))
# save(tracks_genre_features, file = "tracks_genre_features.RData")
is.na(tracks_genre_features)
drop.na(tracks_genre_features)
drop_na(tracks_genre_features)
tracks_genres_features %>% tracks_genre_features %>% drop_na()
tracks_genre_features %>% tracks_genre_features %>% drop_na()
tracks_genre_features <- tracks_genre_features %>% drop_na()
save(tracks_genre_features, file = "tracks_genre_features.RData")
load("tracks_genre_features.RData")
#DATA FILTERING/WRANGLING
#get rid of unnecessary variables (artist.id...)
track_features <- select(tracks_genre_features,c(1,3,5:15))
#filter out tracks repeated data: tracks with 2 artists or more that have the same genre asociated
track_features <- track_features %>% distinct(track.id,genres,.keep_all = TRUE)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
#DATA GATHERING
#example from my own most listened tracks
source('01_setup.R')
library('spotifyr')
Sys.setenv(SPOTIFY_CLIENT_ID = '44855249207d40619183b073132a6407')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2296850888224ff0bb4e35ad23962578')
access_token <- get_spotify_access_token()
#autorizar a coger datos de usuario
aut <- get_spotify_authorization_code()
#palylist tfg 6ZoGtHnhyHsXXYmFriZgyS
df <- get_playlist_audio_features(playlist_uris = "6ZoGtHnhyHsXXYmFriZgyS")
names_col <- names(df)
df <- df %>% select(c(which(names_col== "danceability"):which(names_col == "track.id"),"track.artists"))
df <- df[,c(12,13,1:11)]
tracks_and_artist <- df %>% select(track.id, track.artists) %>% unnest(track.artists) %>%
select(track.id, id) %>%  rename(artist.id = id)
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
for (i in 2:floor(nrow(tracks_and_artist)/50)) {
aux <- get_artists(tracks_and_artist[(i-1)*50:(i-1)*50+50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
artists_info <- bind_rows(artists_info,aux)
}
save(artists_info, file ="artists_info.RData")
artists_info <- artists_info %>% select(genres, id) %>%  rename(artist.id = id)
# artists_info %>% drop_na() %>% unnest(genres)
# glimpse(artists_info)
tracks_and_genres <- inner_join(tracks_and_artist, artists_info)  %>% drop_na() %>% unnest(genres)
# tracks_and_genres %>% group_by(genres) %>% count() %>% arrange(desc(n))
# para filtrar algunos generos
# tracks_and_genres %>% filter(genres %in% c("rock", "alternative rock"))
# para hacer que cada genero sea una columna
# tracks_and_genres %>% select(-artist.id) %>% distinct() %>% mutate(value = TRUE) %>% pivot_wider(names_from = genres, values_from = value, values_fill = FALSE)
#tengo en tracks_and_genres los tracks con su genero asociado, mientras que en tracks tengo los tracks con sus ids
tracks_genre_features <- left_join(tracks_and_genres,tracks,)
tracks_genre_features <- select(tracks_genre_features,c(1:15))
save(tracks_genre_features, file = "tracks_genre_features.RData")
load("tracks_genre_features.RData")
#DATA FILTERING/WRANGLING
#get rid of unnecessary variables (artist.id...)
track_features <- select(tracks_genre_features,c(1,3,5:15))
#filter out tracks repeated data: tracks with 2 artists or more that have the same genre asociated
track_features <- track_features %>% distinct(track.id,genres,.keep_all = TRUE)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
track_features %>% is.na() %>% as.numeric() %>% sum()
track_features$danceability %>% is.na() %>% as.numeric() %>% sum()
track_features$energy %>% is.na() %>% as.numeric() %>% sum()
load("tracks_genre_features.RData")
#DATA FILTERING/WRANGLING
#get rid of unnecessary variables (artist.id...)
track_features <- select(tracks_genre_features,c(1,3,5:15))
track_features$energy %>% is.na() %>% as.numeric() %>% sum()
track_genres_features$energy %>% is.na() %>% as.numeric() %>% sum()
tracks_genre_features$energy %>% is.na() %>% as.numeric() %>% sum()
tracks_genre_features$danceability %>% is.na() %>% as.numeric() %>% sum()
#DATA GATHERING
#example from my own most listened tracks
source('01_setup.R')
library('spotifyr')
Sys.setenv(SPOTIFY_CLIENT_ID = '44855249207d40619183b073132a6407')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2296850888224ff0bb4e35ad23962578')
access_token <- get_spotify_access_token()
#autorizar a coger datos de usuario
aut <- get_spotify_authorization_code()
#palylist tfg 6ZoGtHnhyHsXXYmFriZgyS
df <- get_playlist_audio_features(playlist_uris = "6ZoGtHnhyHsXXYmFriZgyS")
names_col <- names(df)
df <- df %>% select(c(which(names_col== "danceability"):which(names_col == "track.id"),"track.artists"))
df <- df[,c(12,13,1:11)]
tracks_and_artist <- df %>% select(track.id, track.artists) %>% unnest(track.artists) %>%
select(track.id, id) %>%  rename(artist.id = id)
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
for (i in 2:floor(nrow(tracks_and_artist)/50)) {
aux <- get_artists(tracks_and_artist[(i-1)*50:(i-1)*50+50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
artists_info <- bind_rows(artists_info,aux)
}
save(artists_info, file ="artists_info.RData")
artists_info <- artists_info %>% select(genres, id) %>%  rename(artist.id = id)
# artists_info %>% drop_na() %>% unnest(genres)
# glimpse(artists_info)
tracks_and_genres <- inner_join(tracks_and_artist, artists_info)  %>% drop_na() %>% unnest(genres)
# tracks_and_genres %>% group_by(genres) %>% count() %>% arrange(desc(n))
# para filtrar algunos generos
# tracks_and_genres %>% filter(genres %in% c("rock", "alternative rock"))
# para hacer que cada genero sea una columna
# tracks_and_genres %>% select(-artist.id) %>% distinct() %>% mutate(value = TRUE) %>% pivot_wider(names_from = genres, values_from = value, values_fill = FALSE)
#tengo en tracks_and_genres los tracks con su genero asociado, mientras que en tracks tengo los tracks con sus ids
tracks_genre_features <- left_join(tracks_and_genres,tracks,)
tracks_genre_features <- select(tracks_genre_features,c(1:15))
save(tracks_genre_features, file = "tracks_genre_features.RData")
load("tracks_genre_features.RData")
#DATA FILTERING/WRANGLING
#get rid of unnecessary variables (artist.id...)
track_features <- select(tracks_genre_features,c(1,3,5:15))
#filter out tracks repeated data: tracks with 2 artists or more that have the same genre asociated
track_features <- track_features %>% distinct(track.id,genres,.keep_all = TRUE)
tracks_genre_features$danceability %>% is.na() %>% as.numeric() %>% sum()
track_features$danceability %>% is.na() %>% as.numeric() %>% sum()
track_features$genres
track_features$danceability
#DATA FILTERING/WRANGLING
#get rid of unnecessary variables (artist.id...)
track_features <- select(tracks_genre_features,c(1,3,5:15))
track_features$danceability %>% is.na() %>% as.numeric() %>% sum()
#DATA GATHERING
#example from my own most listened tracks
source('01_setup.R')
library('spotifyr')
Sys.setenv(SPOTIFY_CLIENT_ID = '44855249207d40619183b073132a6407')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2296850888224ff0bb4e35ad23962578')
access_token <- get_spotify_access_token()
#autorizar a coger datos de usuario
aut <- get_spotify_authorization_code()
#palylist tfg 6ZoGtHnhyHsXXYmFriZgyS
df <- get_playlist_audio_features(playlist_uris = "6ZoGtHnhyHsXXYmFriZgyS")
names_col <- names(df)
df <- df %>% select(c(which(names_col== "danceability"):which(names_col == "track.id"),"track.artists"))
df <- df[,c(12,13,1:11)]
tracks_and_artist <- df %>% select(track.id, track.artists) %>% unnest(track.artists) %>%
select(track.id, id) %>%  rename(artist.id = id)
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
for (i in 2:floor(nrow(tracks_and_artist)/50)) {
aux <- get_artists(tracks_and_artist[(i-1)*50:(i-1)*50+50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
artists_info <- bind_rows(artists_info,aux)
}
save(artists_info, file ="artists_info.RData")
artists_info <- artists_info %>% select(genres, id) %>%  rename(artist.id = id)
# artists_info %>% drop_na() %>% unnest(genres)
# glimpse(artists_info)
tracks_and_genres <- inner_join(tracks_and_artist, artists_info)  %>% drop_na() %>% unnest(genres)
# tracks_and_genres %>% group_by(genres) %>% count() %>% arrange(desc(n))
# para filtrar algunos generos
# tracks_and_genres %>% filter(genres %in% c("rock", "alternative rock"))
# para hacer que cada genero sea una columna
# tracks_and_genres %>% select(-artist.id) %>% distinct() %>% mutate(value = TRUE) %>% pivot_wider(names_from = genres, values_from = value, values_fill = FALSE)
#tengo en tracks_and_genres los tracks con su genero asociado, mientras que en tracks tengo los tracks con sus ids
tracks_genre_features <- left_join(tracks_and_genres,tracks)
tracks_genre_features <- select(tracks_genre_features,c(1:15))
save(tracks_genre_features, file = "tracks_genre_features.RData")
#DATOS VIEJOS
#
#
#
# #selecting my own playlists
# plists <- get_my_playlists()
# plists <- rbind(plists,get_my_playlists(offset = 19))
# #get each playlist's tracks
# first <- get_playlist_audio_features(playlist_uris = plists$id[1])
# tracks <- tibble(select(first,c(1,6:17,28)))
# #I skip playlists taht cant be collected (fusion playlists and daily mics most likely)
# for (i in c(3:7,9,10,13:29)) {
#   aux <- get_playlist_audio_features(playlist_uris = plists$id[i])
#   aux <- select(aux,c(1,6:17,28))
#   tracks <- add_row(tracks,aux)
# }
# tracks <- tracks[,c(1,13,2:12,14)]
# glimpse(tracks)
# #get genre
# tracks_and_artist <- tracks %>%
#   select(track.id, track.artists) %>%
#   unnest(track.artists) %>%
#   select(track.id, id) %>%
#   rename(artist.id = id)
# #get_artists limit is 50
# artists_info <- get_artists(tracks_and_artist[1:50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
# for (i in 2:floor(nrow(tracks_and_artist)/50)) {
#   aux <- get_artists(tracks_and_artist[(i-1)*50:(i-1)*50+50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
#   artists_info <- bind_rows(artists_info,aux)
# }
# save(artists_info, file ="artists_info.RData")
# glimpse(artists_info)
# artists_info <- artists_info %>% select(genres, id) %>%  rename(artist.id = id)
# artists_info %>% drop_na() %>% unnest(genres)
# glimpse(artists_info)
# tracks_and_genres <- inner_join(tracks_and_artist, artists_info)  %>% drop_na() %>% unnest(genres)
# tracks_and_genres %>% group_by(genres) %>% count() %>% arrange(desc(n))
# # para filtrar algunos generos
# tracks_and_genres %>% filter(genres %in% c("rock", "alternative rock"))
# # para hacer que cada genero sea una columna
# tracks_and_genres %>% select(-artist.id) %>% distinct() %>% mutate(value = TRUE) %>% pivot_wider(names_from = genres, values_from = value, values_fill = FALSE)
#
#
# #tengo en tracks_and_genres los tracks con su genero asociado, mientras que en tracks tengo los tracks con sus ids
# tracks_genre_features <- left_join(tracks_and_genres,tracks,)
# tracks_genre_features <- select(tracks_genre_features,c(1:15))
# save(tracks_genre_features, file = "tracks_genre_features.RData")
tracks
df
tracks <- df %>% select(-c("track.artists"))
tracks_and_artist <- df %>% select(track.id, track.artists) %>% unnest(track.artists) %>%
select(track.id, id) %>%  rename(artist.id = id)
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
#autorizar a coger datos de usuario
aut <- get_spotify_authorization_code()
#autorizar a coger datos de usuario
aut <- get_spotify_authorization_code()
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
for (i in 2:floor(nrow(tracks_and_artist)/50)) {
aux <- get_artists(tracks_and_artist[(i-1)*50:(i-1)*50+50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
artists_info <- bind_rows(artists_info,aux)
}
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
for (i in 2:floor(nrow(tracks_and_artist)/50)) {
aux <- get_artists(tracks_and_artist[(i-1)*50:(i-1)*50+50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
artists_info <- bind_rows(artists_info,aux)
}
get_artists(tracks_and_artist[1:50,2])
View(aut)
artists_info <- get_artists(tracks_and_artist[1:50,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
for (i in 2:floor(nrow(tracks_and_artist)/50)) {
aux <- get_artists(tracks_and_artist[(i-1)*50:(i-1)*50+50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
artists_info <- bind_rows(artists_info,aux)
}
library('spotifyr')
?get_artists
tracks_and_artist[1:50,2]
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
tracks_and_artist[1,2]
#get_artists limit is 50
artists_info <- get_artist(tracks_and_artist[1,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
#get_artists limit is 50
artists_info <- get_artist(tracks_and_artist[1:49,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:49,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:10,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
artists_info <- get_artists(tracks_and_artist[1:50,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
c(tracks_and_artist[1:50,2])
#get_artists limit is 50
artists_info <- get_artists(c(tracks_and_artist[1:50,2])) %>% pull(artist.id) %>% unique() %>% as_tibble()
get_artists(c(tracks_and_artist[1:50,2]))
get_artist("0L8ExT028jH3ddEcZwqJJ5")
get_artists(c("0L8ExT028jH3ddEcZwqJJ5",""0L8ExT028jH3ddEcZwqJJ5")
get_artists(c("0L8ExT028jH3ddEcZwqJJ5","0L8ExT028jH3ddEcZwqJJ5")
get_artists(c("0L8ExT028jH3ddEcZwqJJ5","0L8ExT028jH3ddEcZwqJJ5")
a <- get_artists(c("0L8ExT028jH3ddEcZwqJJ5","0L8ExT028jH3ddEcZwqJJ5")
a <- get_artists(c("0L8ExT028jH3ddEcZwqJJ5","0L8ExT028jH3ddEcZwqJJ5")
a <- get_artists(c("0L8ExT028jH3ddEcZwqJJ5","0L8ExT028jH3ddEcZwqJJ5")
#get_artists limit is 50
artists_info <- c()
#get_artists limit is 50
artists_info <- c()
for (i in 1:floor(nrow(tracks_and_artist)/50)) {
aux <- get_artists(tracks_and_artist[(i-1)*50+1:(i-1)*50+50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
artists_info <- bind_rows(artists_info,aux)
}
save(artists_info, file ="artists_info.RData")
artists_info <- artists_info %>% select(genres, id) %>%  rename(artist.id = id)
# artists_info %>% drop_na() %>% unnest(genres)
# glimpse(artists_info)
tracks_and_genres <- inner_join(tracks_and_artist, artists_info)  %>% drop_na() %>% unnest(genres)
#tengo en tracks_and_genres los tracks con su genero asociado, mientras que en tracks tengo los tracks con sus ids
tracks_genre_features <- left_join(tracks_and_genres,tracks)
tracks_genre_features <- select(tracks_genre_features,c(1:15))
tracks_genre_features <- select(-c("artist.id"))
tracks_genre_features <- tracks_genre_features %>% select(-c("artist.id"))
save(tracks_genre_features, file = "tracks_genre_features.RData")
load("tracks_genre_features.RData")
#DATA FILTERING/WRANGLING
#get rid of unnecessary variables (artist.id...)
track_features <- select(tracks_genre_features,c(1,3,5:15))
#filter out tracks repeated data: tracks with 2 artists or more that have the same genre asociated
track_features <- track_features %>% distinct(track.id,genres,.keep_all = TRUE)
#DATA FILTERING/WRANGLING
#get rid of unnecessary variables (artist.id...)
track_features <- tracks_genre_features
#filter out tracks repeated data: tracks with 2 artists or more that have the same genre asociated
track_features <- track_features %>% distinct(track.id,genres,.keep_all = TRUE)
track_features$danceability %>% is.na() %>% as.numeric() %>% sum()
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n)
a <- track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n) %>% filter(n<5)
'%!in%' <- function(x,y)!('%in%'(x,y))
track_features <- track_features %>% filter(genres %!in% a$genres)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n)
a <- track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n) %>% filter(n<10)
track_features <- track_features %>% filter(genres %!in% a$genres)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n)
a <- track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n) %>% filter(n<30)
'%!in%' <- function(x,y)!('%in%'(x,y))
track_features <- track_features %>% filter(genres %!in% a$genres)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n)
filtro <- c("progressive house","tropical house","electro house")
a <- track_features$genres %>% replace(which(track_features$genres %in% filtro),"house")
filtro <- c("dutch edm")
a <- a %>% replace(which(track_features$genres %in% filtro),"edm")
filtro <- c("nu metal", "rap metal","alternative metal","birmingham metal","glam metal","old school thrash",
"power metal","thrash metal")
a <- a %>% replace(which(track_features$genres %in% filtro),"metal")
filtro <- c("trap latino","trap triste")
a <- a %>% replace(which(track_features$genres %in% filtro),"trap")
filtro <-c("latin", "latin hip hop")
a <- a %>% replace(which(track_features$genres %in% filtro),"reggaeton")
filtro <-c("hard rock", "alternative rock","funk rock","album rock")
a <- a %>% replace(which(track_features$genres %in% filtro),"rock")
filtro <-c("urbano espanol", "drill espanol")
a <- a %>% replace(which(track_features$genres %in% filtro),"trap")
track_features <- track_features %>% mutate(genres = a)
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
filtro <-c("pop dance", "dance pop")
a <- a %>% replace(which(track_features$genres %in% filtro),"pop")
track_features <- track_features %>% mutate(genres = a)
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
filtro <- c("nu metal", "rap metal","alternative metal","birmingham metal","glam metal","old school thrash",
"power metal","thrash metal","funk metal")
a <- a %>% replace(which(track_features$genres %in% filtro),"metal")
track_features <- track_features %>% mutate(genres = a)
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
track_features <- track_features %>% distinct(track.id,genres,.keep_all = TRUE)
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
#saving filtered data
save(track_features, file = "track_features.RData")
#standarize all varaibles
t_max <- max(track_features$tempo)
t_min <- min(track_features$tempo)
track_features <- track_features %>% mutate( tempo = (track_features$tempo-t_min)/(t_max-t_min))
l_max <- max(track_features$loudness)
l_min <- min(track_features$loudness)
l <- (track_features$loudness-l_min)/(l_max-l_min)
track_features <- track_features %>% mutate(loudness = (track_features$loudness-l_min)/(l_max-l_min))
features <- track_features %>% select(-c("key","mode"))
#save filtered data with features adjusted
save(track_features,file = "track_features.RData")
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n))
#REPASAR CON LOS NUEVOS DATOS
glimpse(track_features)
clust1 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans")
clust2 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "complete")
#for dbscan epsilon and minpts have to be determined
# rule of thumb: MinPts = 2*dimension of data. This data has a lot of duplicates so we will do 3*dim
MinP <- 3*ncol(track_features %>% select(-c("track.id","genres")))
neigh <- track_features %>% select(-c("track.id","genres")) %>% kNN(2)
ep <- 0.95*max(d)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = ep, minPts = MinP)
ep <- 0.95*max(d)
neigh$dist
d <- neigh$dist[,2]
ep <- 0.95*max(d)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = ep, minPts = MinP)
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster), N = c(1:nrow(track_features))) %>% filter(dbs != 0)
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4,index = "ch")
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
#add the clustering results to the main data
analysis_alldata <- track_features %>% select(c("track.id","genres"))
analysis_alldata <- analysis_alldata %>% mutate(N = c(1:nrow(track_features)))
#to add the km_filter data
aux2 <- aux %>% select("N","km_filter")
analysis_alldata <- left_join(analysis_alldata,aux2, by = c("N"))
analysis_alldata <- analysis_alldata %>% select(-c("N"))
analysis_alldata <- analysis_alldata %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
#Swap Nas to 0 in km_filter
a <- rep(0,ncol(analysis_alldata))
analysis_alldata <- add_row(analysis_alldata,km_filter = "0")
analysis_alldata <- analysis_alldata %>% mutate(km_filter = as.factor(analysis_alldata$km_filter))
analysis_alldata$km_filter %>% replace_na(0)
analysis_alldata <- analysis_alldata[-4103,]
summary(analysis_alldata)
#save the file with the clusterings
save(analysis_alldata, file = "analysis_alldata.RData")
summary(track_features)
var(track_features)
var(track_features$danceability)
var(track_features$energy)
?bartlett.test()
#Data preparation and classification
#Loading and setting the data obtained in Data_collection
source("01_setup.R")
track_features %>% select(-c("track.id","genres")) %>% bartlett.test()
groups <- names(track_features %>% select(-c("track.id","genres")))
track_features %>% select(-c("track.id","genres")) %>% bartlett.test(,groups)
?ks.test
ks.test(track_features$danceability)
ks.test(track_features$danceability,pnorm)
ks.test(track_features$energy,pnorm)
#PCA
pca_f <- track_features %>% select(-c("track.id","genres")) %>% prcomp()
summary(pca_f)
as.tibble(pca_aux$x[,1:6])
as.tibble(pca_f$x[,1:6])
track_features <- track_features %>% select(-c("key","mode"))
#save filtered data with features adjusted
save(track_features,file = "track_features.RData")
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n))
load('track_features.RData')
#PCA
pca_f <- track_features %>% select(-c("track.id","genres")) %>% prcomp()
summary(pca_f)
as.tibble(pca_f$x[,1:6])
pca_f$rotation
bartlett.test(track_features)
groups <- names(track_features %>% select(-c("track.id","genres")))
track_features %>% select(-c("track.id","genres")) %>% bartlett.test(,groups)
ks.test(track_features$danceability,pnorm)
ks.test(track_features$tempo,pnorm)
clust1 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans")
clust2 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "complete")
#for dbscan epsilon and minpts have to be determined
# rule of thumb: MinPts = 2*dimension of data. This data has a lot of duplicates so we will do 3*dim
MinP <- 3*ncol(track_features %>% select(-c("track.id","genres")))
neigh <- track_features %>% select(-c("track.id","genres")) %>% kNN(2)
d <- neigh$dist[,2]
ep <- 0.95*max(d)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = ep, minPts = MinP)
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster), N = c(1:nrow(track_features))) %>% filter(dbs != 0)
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4,index = "ch")
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
#add the clustering results to the main data
analysis_alldata <- track_features %>% select(c("track.id","genres"))
analysis_alldata <- analysis_alldata %>% mutate(N = c(1:nrow(track_features)))
#to add the km_filter data
aux2 <- aux %>% select("N","km_filter")
analysis_alldata <- left_join(analysis_alldata,aux2, by = c("N"))
analysis_alldata <- analysis_alldata %>% select(-c("N"))
analysis_alldata <- analysis_alldata %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
#Swap Nas to 0 in km_filter
a <- rep(0,ncol(analysis_alldata))
analysis_alldata <- add_row(analysis_alldata,km_filter = "0")
analysis_alldata <- analysis_alldata %>% mutate(km_filter = as.factor(analysis_alldata$km_filter))
analysis_alldata$km_filter %>% replace_na(0)
analysis_alldata <- analysis_alldata[-4103,]
summary(analysis_alldata)
#save the file with the clusterings
save(analysis_alldata, file = "analysis_alldata.RData")
analysis_alldata$km
#primera interpretacion
analysis_alldata %>% group_by(km)
#primera interpretacion
analysis_alldata %>% group_by(km) %>% count()
#primera interpretacion
analysis_alldata %>% filter(km == 3)
#primera interpretacion
analysis_alldata %>% filter(km == 3) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(km == 2) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(km == 3) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(km == 1) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(dbs == 1) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(dbs == 2) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(dbs == 0) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(dbs == 3) %>% group_by(genres) %>% count()
