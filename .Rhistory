analysis
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
analysis
#Data preparation and classification
#Loading and setting the data obtained in Data_collection
source("01_setup.R")
count(analysis$dbs)
levels(analysis$dbs)
?count
sumarize(analysis$dbs)
summarize(analysis$dbs)
summary(analysis$dbs)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = ep, minPts = MinP)
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis$dbs)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = max(d), minPts = MinP)
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis$dbs)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = ep, minPts = MinP)
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis$dbs)
ep <- 0.95*max(d)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = ep, minPts = MinP)
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis$dbs)
#do a kmeans after filtering noise points
aux <- track_features %>% select(-c("track.id","genres")) %>% mutate(dbs=factor(clust3$cluster)) %>% filter(dbs != 0)
clust4 <- aux %>% select(-c("dbs")) %>% NbClust(method = "kmeans")
summary(clust4)
summarize(clust4)
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster)) %>% filter(dbs != 0)
clust4 <- aux %>% select(-c("dbs","track.id","genres")) %>% NbClust(method = "kmeans")
?left_join
?left_join
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster)) %>% filter(dbs != 0)
clust4 <- aux %>% select(-c("dbs","track.id","genres")) %>% NbClust(method = "kmeans")
gc()
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
clust4 <- aux %>% select(-c("dbs","track.id","genres")) %>% NbClust(method = "kmeans")
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
aux
aux$km_filter
aux %>% select("track.id","km_filter")
aux2 <- aux %>% select("track.id","km_filter")
left_join(analysis,aux2)
aux3<-left_join(analysis,aux2)
summary(aux3$km_filter)
aux3<-left_join(analysis,aux2, by = "track.id")
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
aux2 <- aux %>% select("track.id","km_filter")
aux3<-left_join(analysis,aux2, by = "track.id")
left_join(analysis,aux2, by = "track.id")
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis$dbs)
summary(analysis)
aux2 <- aux %>% select("track.id","km_filter")
aux3 <-
aux3 <- c()
aux3 <- left_join(analysis,aux2, by = "track.id")
aux2 <- aux %>% select("track.id","genres","km_filter")
aux3 <- left_join(analysis,aux2, by = c("track.id","genres")
aux3 <- left_join(analysis,aux2, by = c("track.id","genres"))
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
aux2 <- aux %>% select("track.id","genres","km_filter")
aux3 <- left_join(analysis,aux2, by = c("track.id","genres"))
aux3 <- left_join(analysis,aux)
aux2 <- aux %>% select("track.id","genres","km_filter")
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
aux3 <- left_join(analysis,aux)
summary(aux3)
is.na(aux3$track.id)
length(is.na(aux3$track.id)))
length(is.na(aux3$track.id))
sum(as.numeric(is.na(aux3$track.id)))
sum(as.numeric(is.na(aux3$track.id)))
sum(as.numeric(is.na(aux3$genres)))
sum(as.numeric(is.na(aux3$km_filter)))
aux3 <- left_join(track_features,aux)
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis)
#PCA
pca_f <- features %>% select(-c("track.id","genres")) %>% prcomp()
summary(pca_f)
pca_f$scale
pca_f$sdev
?prcomp
pca_f$rotation
plot(pca_f$x)
plot(summary(pca_f))
pca_f$x
#Data preparation and classification
#Loading and setting the data obtained in Data_collection
source("01_setup.R")
#for dbscan epsilon and minpts have to be determined
# rule of thumb: MinPts = 2*dimension of data. This data has a lot of duplicates so we will do 3*dim
MinP <- 3*ncol(track_features %>% select(-c("track.id","genres")))
neigh <- track_features %>% select(-c("track.id","genres")) %>% kNN(2)
ep <- 0.95*max(d)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = ep, minPts = MinP)
clust3$cluster
summary(clust3)
summary(clust3$clusters)
summary(clust3$cluster)
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis$dbs)
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster)) %>% filter(dbs != 0)
clust4 <- aux %>% select(-c("dbs","track.id","genres")) %>% NbClust(method = "kmeans")
?left_join
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
aux2 <- aux %>% select("track.id","genres","km_filter")
aux3 <- left_join(track_features,aux)#ESTO NO SE NI QUE ESTA HACIENDO YA :'     )
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
aux2 <- aux %>% select("track.id","km_filter")
aux3 <- left_join(track_features,aux)#ESTO NO SE NI QUE ESTA HACIENDO YA :'     )
aux3 <- left_join(analysis,aux2)#ESTO NO SE NI QUE ESTA HACIENDO YA :'     )
aux2 <- aux %>% select("track.id","genres","km_filter")
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
aux3 <- left_join(analysis,aux2)#ESTO NO SE NI QUE ESTA HACIENDO YA :'     )
aux2 <- aux %>% select("track.id","km_filter")
aux3 <- left_join(analysis,aux2)#ESTO NO SE NI QUE ESTA HACIENDO YA :'     )
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
aux3 <- left_join(analysis,aux2)#ESTO NO SE NI QUE ESTA HACIENDO YA :'     )
aux2 <- aux %>% select("track.id","genres","km_filter")
aux3 <- left_join(analysis,aux2)#ESTO NO SE NI QUE ESTA HACIENDO YA :'     )
aux3 <- left_join(analysis,aux2, by = c("track.id","genres"), suffix = c("1","2"))
?NbClust
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition), N = c(1:nrow(track_features)))
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster), N = c(1:nrow(track_features))) %>% filter(dbs != 0)
aux$N
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4,index = "ch")
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
aux2 <- aux %>% select("N","km_filter")
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
?merge
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(N = c(1:nrow(track_features)))
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
aux2 <- aux %>% select("N","km_filter")
aux3 <- left_join(analysis,aux2, by = c("N"))
aux3 <- merge(analysis,aux2, by = c("N"))
aux3 <- left_join(analysis,aux2, by = c("N"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis)
analysis <- left_join(analysis,aux2, by = c("N"))
analysis <- analysis %>% select(-c("N"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
summary(analysis)
#Swap Nas to 0 in km_filter
analysis$km_filter %>% is.na()
#Swap Nas to 0 in km_filter
analysis[analysis$km_filter %>% is.na()]
#Swap Nas to 0 in km_filter
analysis$km_filter %>% is.na()]
#Swap Nas to 0 in km_filter
analysis$km_filter %>% is.na()
#Swap Nas to 0 in km_filter
analysis[analysis$km_filter %>% is.na()]=0
#Swap Nas to 0 in km_filter
analysis$km_filter[is.na(analysis$km_filter)]=0
#Swap Nas to 0 in km_filter
analysis[is.na(analysis$km_filter)]=0
#Swap Nas to 0 in km_filter
analysis$km_filter %>% is.na() %>% as.numeric()
analysis[a==1]
#Swap Nas to 0 in km_filter
a <- analysis$km_filter %>% is.na() %>% as.numeric()
analysis[a==1]
analysis[which(a==1)]
analysis$km_filter[which(a==1)]
analysis$km_filter[which(a==1)]=0
?replace_na
analysis$km_filter %>% replace_na(,0)
analysis$km_filter %>% replace_na(,replace = 0)
analysis$km_filter %>% replace_na(replace = 0)
analysis %>% replace_na(replace = 0)
analysis$km_filter %>% replace_na(0)
analysis %>% mutate(analysis$km_filter = replace_na(analysis$km_filter,0))
analysis %>% mutate(analysis$km_filter = replace_na(analysis$km_filter,0))
analysis %>% mutate(km_filter = replace_na(analysis$km_filter,0))
analysis %>% mutate(km_filter = replace_na(analysis$km_filter,10))
analysis %>% mutate(km_filter = replace_na(analysis$km_filter,c("0")))
analysis %>% mutate(km_filter = replace_na(analysis$km_filter,"0")
analysis %>% mutate(km_filter = replace_na(analysis$km_filter,"0"))
analysis %>% mutate(km_filter = replace_na(analysis$km_filter,"0"))
analysis %>% mutate(km_filter = as.character(analysis$km_filter) %>% mutate(km_filter = as.factor(replace_na(analysis$km_filter,0)))
#PCA
pca_f <- features %>% select(-c("track.id","genres")) %>% prcomp()
analysis %>% mutate(km_filter = as.character(analysis$km_filter)) %>% mutate(km_filter = as.factor(replace_na(analysis$km_filter,0)))
analysis %>% mutate(km_filter = as.character(analysis$km_filter)) %>% mutate(km_filter = as.factor(replace_na(analysis$km_filter,"0")))
analysis %>% mutate(km_filter = as.character(analysis$km_filter)) %>% mutate(km_filter = replace_na(analysis$km_filter,"0"))
?rep
#Swap Nas to 0 in km_filter
rep(0,ncol(analysis))
#Swap Nas to 0 in km_filter
a <- rep(0,ncol(analysis))
add_row(analysis,a)
?add_row
add_row(analysis,km_filter = "0")
b <- add_row(analysis,km_filter = "0")
b[40103]
b(40103)
b(4103)
b[4103]
b[4103,]
analysis <- add_row(analysis,km_filter = "0")
analysis %>% replace_na(,0)
analysis$km_filter %>% replace_na(,0)
summary(analysis)
#add the clustering results to the main data
analysis <- track_features %>% select(c("track.id","genres"))
analysis <- analysis %>% mutate(N = c(1:nrow(track_features)))
#to add the km_filter data
aux2 <- aux %>% select("N","km_filter")
analysis <- left_join(analysis,aux2, by = c("N"))
analysis <- analysis %>% select(-c("N"))
analysis <- analysis %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
#Swap Nas to 0 in km_filter
a <- rep(0,ncol(analysis))
analysis <- add_row(analysis,km_filter = "0")
analysis$km_filter %>% replace_na(,0)
summary(analysis)
as.factor(analysis$km_filter)
analysis %>% mutate(km_filter = as.factor(analysis$km_filter))
analysis$km_filter %>% replace_na(,0)
summary(analysis)
analysis <- analysis %>% mutate(km_filter = as.factor(analysis$km_filter))
analysis$km_filter %>% replace_na(,0)
summary(analysis)
summary(analysis)
analysis$km_filter %>% replace_na(,0)
analysis$km_filter %>% replace_na(0)
analysis[-4103,]
analysis <- analysis[-4103,]
analysis[4102,]
summary(analysis)
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4,index = c("ch","silhouette"))
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4,index = "ch")
?NbClust
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4)
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4)
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster), N = c(1:nrow(track_features))) %>% filter(dbs != 0)
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4)
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4,index = "ch")
summary(analysis)
#seems like grp 2 of km is grp 1 of hc
#save the file with the clusterings
save(analysis, file = "analysis.RData")
load("analysis.RData")
summary(analysis)
#filter genres
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n))
#Data preparation and classification
#Loading and setting the data obtained in Data_collection
source("01_setup.R")
#filter genres
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n))
#save a general file with all decently populated genres together
save(track_features,file = "track_features.RData")
#PCA
pca_f <- features %>% select(-c("track.id","genres")) %>% prcomp()
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n))
?replace
#mix genres that can be considered the same
#creating genre: lo-fi
track_features$genres %>% replace(c("lo-fi jazzhop","christian lo-fi","chillhop","lo-fi beats"),"lo-fi")
#mix genres that can be considered the same
#creating genre: lo-fi
track_features$genres %>% replace(c("lo-fi jazzhop","christian lo-fi","chillhop","lo-fi beats"),"lo-fi") %>% group_by(genres) %>% count() %>% arrange(desc(n))
#mix genres that can be considered the same
#creating genre: lo-fi
filtro1 <- track_features$genres %>% replace(c("lo-fi jazzhop","christian lo-fi","chillhop","lo-fi beats"),"lo-fi")
filtro1 %>% %>% group_by(genres) %>% count() %>% arrange(desc(n))
filtro1 %>% group_by(genres) %>% count() %>% arrange(desc(n))
#mix genres that can be considered the same
#creating genre: lo-fi
filtro1 <- track_features %>% mutate(genres %>% replace(c("lo-fi jazzhop","christian lo-fi","chillhop","lo-fi beats"),"lo-fi"))
#mix genres that can be considered the same
#creating genre: lo-fi
filtro1 <- track_features %>% mutate(genres = replace(c("lo-fi jazzhop","christian lo-fi","chillhop","lo-fi beats"),"lo-fi"))
#mix genres that can be considered the same
#creating genre: lo-fi
lofi <- track_features$genres %>% replace(c("lo-fi jazzhop","christian lo-fi","chillhop","lo-fi beats"),"lo-fi")
filtro1 <- track_features %>% mutate(genres = lofi)
#mix genres that can be considered the same
#creating genre: lo-fi
lofi <- track_features$genres %>% replace(c("lo-fi jazzhop","christian lo-fi","chillhop","lo-fi beats"),"lo-fi")
lofi
lofi["lofi"]
lofi["lo-fi"]
lofi["big room"]
lofi=="big room"
sum(as.numeric(lofi=="big room"))
sum(as.numeric(lofi=="lo-fi"))
sum(as.numeric(lofi=="chillhop"))
which(track_features$genres=="jazzhop")
which(track_features$genres=="lo-fi jazzhop")
which(track_features$genres==c("lo-fi jazzhop","chillhop"))
which(track_features$genres=="lo-fi jazzhop"|"chillhop")
which(track_features$genres=="lo-fi jazzhop"|track_features$genres=="chillhop")
#mix genres that can be considered the same
#creating genre: lo-fi
lofi <- track_features$genres %>% replace(which(track_features$genres =="lo-fi jazzhop"
|track_features$genres =="christian lo-fi"
|track_features$genres =="chillhop"
|track_features$genres =="lo-fi beats"),"lo-fi")
filtro1 <- track_features %>% mutate(genres = lofi)
filtro1 %>% group_by(genres) %>% count() %>% arrange(desc(n))
?distinct
filtro1 %>% distinct(,c("track.id","genres"))
filtro1 %>% distinct("track.id","genres")
filtro1 %>% distinct(track.id,genres)
prueba <- filtro1 %>% distinct(track.id,genres)
prueba %>% group_by(genres) %>% count() %>% arrange(desc(n))
prueba <- filtro1 %>% distinct(track.id&genres)
prueba <- filtro1 %>% distinct(track.id,genres)
prueba <- filtro1 %>% unique(track.id,genres)
prueba <- filtro1 %>% unique(track.id,genres)
df <- tibble(x= sample(10,100,rep=TRUE),y= sample(10,100,rep=TRUE))
df
df %>% distinct(x)
df %>% distinct(x,y)
prueba <- filtro1 %>% distinct(track.id,genres,.keep_all = TRUE)
prueba %>% group_by(genres) %>% count() %>% arrange(desc(n))
#Data preparation and classification
#Loading and setting the data obtained in Data_collection
source("01_setup.R")
?group_by
track_features %>% group_by(track.id,genres)
track_features %>% group_by(track.id,genres) %>% count()
track_features %>% group_by(track.id,genres) %>% count() %>% arrange(desc(n))
library(spotifyr)
get_track("22YVt0f3WR4XaK6l1TEgOr")
Sys.setenv(SPOTIFY_CLIENT_ID = '44855249207d40619183b073132a6407')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2296850888224ff0bb4e35ad23962578')
access_token <- get_spotify_access_token()
#autorizar a coger datos de usuario
aut <- get_spotify_authorization_code()
get_track("22YVt0f3WR4XaK6l1TEgOr")
tracks_and_genres %>% group_by(track.id,genres) %>% count() %>% arrange(desc(n))
#palylist tfg 6ZoGtHnhyHsXXYmFriZgyS
df <- get_playlist_audio_features("6ZoGtHnhyHsXXYmFriZgyS")
#palylist tfg 6ZoGtHnhyHsXXYmFriZgyS
df <- get_playlist_audio_features(playlist_uris = "6ZoGtHnhyHsXXYmFriZgyS")
#palylist tfg 6ZoGtHnhyHsXXYmFriZgyS
df <- get_playlist_audio_features(playlist_uris = "6ZoGtHnhyHsXXYmFriZgyS")
which(df == tack.id)
which(names(df) == tack.id)
names()df
names(df)
which(names(df) == "tack.id")
which(names(df) == "track.id")
which(df == "track.id")
df %>% select(c(which(names_col== "danceability"):which(names_col == "track.id","track.artists")))
names_col <- names(df)
df %>% select(c(which(names_col== "danceability"):which(names_col == "track.id","track.artists")))
df %>% select(c(which(names_col== "danceability"):which(names_col == "track.id"),"track.artists"))
df <- df %>% select(c(which(names_col== "danceability"):which(names_col == "track.id"),"track.artists"))
df <- df[,c(12,13,1:11)]
df %>% select(track.id, track.artists) %>% unnest(track.artists) %>%
select(track.id, id) %>%  rename(artist.id = id)
tracks_and_artist <- df %>% select(track.id, track.artists) %>% unnest(track.artists) %>%
select(track.id, id) %>%  rename(artist.id = id)
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
glimpse(tracks_and_artist)
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,] %>% pull(artist.id)
artist_info
artists_info
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,]) %>% pull(artist.id)
?get_artists
tracks_and_artist
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,2]) %>% pull(artist.id)
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,2])
tracks_and_artist[1:50,2]
a <- tracks_and_artist[1:50,2]
sum(as.numeric(a == "0L8ExT028jH3ddEcZwqJJ5"))
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,2]) %>% pull(artist.id) %>% unique()) %>% as_tibble()
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,]) %>% pull(artist.id) %>% unique() %>% as_tibble()
#get_artists limit is 50
artists_info <- get_artists(tracks_and_artist[1:50,2]) %>% pull(artist.id) %>% unique() %>% as_tibble()
for (i in 2:floor(nrow(tracks_and_artist)/50)) {
aux <- get_artists(tracks_and_artist[(i-1)*50:(i-1)*50+50,] %>% pull(artist.id) %>% unique()) %>% as_tibble()
artists_info <- bind_rows(artists_info,aux)
}
save(artists_info, file ="artists_info.RData")
glimpse(artists_info)
artists_info <- artists_info %>% select(genres, id) %>%  rename(artist.id = id)
artists_info %>% drop_na() %>% unnest(genres)
glimpse(artists_info)
tracks_and_genres <- inner_join(tracks_and_artist, artists_info)  %>% drop_na() %>% unnest(genres)
tracks_and_genres %>% group_by(genres) %>% count() %>% arrange(desc(n))
# para filtrar algunos generos
tracks_and_genres %>% filter(genres %in% c("rock", "alternative rock"))
# para hacer que cada genero sea una columna
tracks_and_genres %>% select(-artist.id) %>% distinct() %>% mutate(value = TRUE) %>% pivot_wider(names_from = genres, values_from = value, values_fill = FALSE)
#tengo en tracks_and_genres los tracks con su genero asociado, mientras que en tracks tengo los tracks con sus ids
tracks_genre_features <- left_join(tracks_and_genres,tracks,)
tracks_genre_features <- select(tracks_genre_features,c(1:15))
save(tracks_genre_features, file = "tracks_genre_features.RData")
load("tracks_genre_features.RData")
#DATA FILTERING/WRANGLING
#get rid of unnecessary variables (artist.id...)
track_features <- select(tracks_genre_features,c(1,3,5:15))
#filter genres
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n))
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
#filter genres
track_features %>% group_by(track.id,genres) %>% distinct() %>% count() %>% arrange(desc(n))
?group_by
#filter out tracks repeated data: tracks with 2 artists or more that have the same genre asociated
track_features %>% distinct(track.id,genres,.keep_all = TRUE)
#filter out tracks repeated data: tracks with 2 artists or more that have the same genre asociated
track_features <- track_features %>% distinct(track.id,genres,.keep_all = TRUE)
#filter genres
track_features %>% group_by(track.id,genres) %>% distinct() %>% count() %>% arrange(desc(n))
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange()
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange()
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n) %>% filter(n<5)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n) %>% filter(n==1)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n) %>% filter(n==2)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n) %>% filter(n<5)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n) %>% filter(n<5)
#filter genres
track_features %>% group_by(genres)
#filter genres
track_features %>% group_by(genres)
#filter genres
track_features %>% group_by(genres) %>% distinct()
?count
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count()
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n) %>% filter(n<5)
a <- track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n) %>% filter(n<5)
a <- a[,1]
a$genres
a <- as.vector(a[,1])
a <- track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n) %>% filter(n<5)
track_features %>% filter(genres!=a$genres)
'%!in%' <- function(x,y)!('%in%'(x,y))
track_features %>% filter(genres %!in% a$genres)
track_features <- track_features %>% filter(genres %!in% a$genres)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n) %>% filter(n<5)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n)
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(desc(n))
filtro <- c("progressive house","tropical house")
track_features$genres %>% replace(which(track_features$genres %in% filtro,"house")
#filter genres
track_features %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n)
track_features$genres %>% replace(which(track_features$genres %in% filtro,"house"))
track_features$genres %>% replace(which(track_features$genres %in% filtro),"house")
track_features$genres %>% replace(which(track_features$genres %in% filtro),"house") %>% group_by(genres) %>% distinct() %>% count() %>% arrange(n)
