pca_f <- track_features %>% select(-c("track.id","genres")) %>% prcomp()
summary(pca_f)
as.tibble(pca_f$x[,1:6])
pca_f$rotation
bartlett.test(track_features)
groups <- names(track_features %>% select(-c("track.id","genres")))
track_features %>% select(-c("track.id","genres")) %>% bartlett.test(,groups)
ks.test(track_features$danceability,pnorm)
ks.test(track_features$tempo,pnorm)
clust1 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans")
clust2 <- track_features %>% select(-c("track.id","genres")) %>% NbClust(method = "complete")
#for dbscan epsilon and minpts have to be determined
# rule of thumb: MinPts = 2*dimension of data. This data has a lot of duplicates so we will do 3*dim
MinP <- 3*ncol(track_features %>% select(-c("track.id","genres")))
neigh <- track_features %>% select(-c("track.id","genres")) %>% kNN(2)
d <- neigh$dist[,2]
ep <- 0.95*max(d)
clust3 <- track_features %>% select(-c("track.id","genres")) %>% dbscan(,eps = ep, minPts = MinP)
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster), N = c(1:nrow(track_features))) %>% filter(dbs != 0)
clust4 <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans",min.nc = 2,max.nc = 4,index = "ch")
aux <- aux %>% mutate(km_filter = factor(clust4$Best.partition))
#add the clustering results to the main data
analysis_alldata <- track_features %>% select(c("track.id","genres"))
analysis_alldata <- analysis_alldata %>% mutate(N = c(1:nrow(track_features)))
#to add the km_filter data
aux2 <- aux %>% select("N","km_filter")
analysis_alldata <- left_join(analysis_alldata,aux2, by = c("N"))
analysis_alldata <- analysis_alldata %>% select(-c("N"))
analysis_alldata <- analysis_alldata %>% mutate(dbs = factor(clust3$cluster),km = factor(clust1$Best.partition), hc = factor(clust2$Best.partition))
#Swap Nas to 0 in km_filter
a <- rep(0,ncol(analysis_alldata))
analysis_alldata <- add_row(analysis_alldata,km_filter = "0")
analysis_alldata <- analysis_alldata %>% mutate(km_filter = as.factor(analysis_alldata$km_filter))
analysis_alldata$km_filter %>% replace_na(0)
analysis_alldata <- analysis_alldata[-4103,]
summary(analysis_alldata)
#save the file with the clusterings
save(analysis_alldata, file = "analysis_alldata.RData")
analysis_alldata$km
#primera interpretacion
analysis_alldata %>% group_by(km)
#primera interpretacion
analysis_alldata %>% group_by(km) %>% count()
#primera interpretacion
analysis_alldata %>% filter(km == 3)
#primera interpretacion
analysis_alldata %>% filter(km == 3) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(km == 2) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(km == 3) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(km == 1) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(dbs == 1) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(dbs == 2) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(dbs == 0) %>% group_by(genres) %>% count()
#primera interpretacion
analysis_alldata %>% filter(dbs == 3) %>% group_by(genres) %>% count()
install.packages("GGally")
#variable analysis
source('01_setup.R')
load('track_features.RData')
?ggcor
?ggcorr
features <- track_features %>% select(-c("track.id","genres"))
ggcor(features)
ggcorr(features)
#PCA
pca_f <- features %>% prcomp()
summary(pca_f)
track_features %>% group_by(genres) %>% count() %>% arrange(desc(n))
#pick around 50 rock and metal songs so there is no overrepresentation
r <- track_features %>% filter(genres %in% c("rock")) %>% sample(50)
track_features %>% filter(genres %in% c("rock"))
?sample
#pick around 50 rock and metal songs so there is no overrepresentation
r <- track_features %>% filter(genres %in% c("rock")) %>% sample(size = 50)
sample(c(1:10),5)
sample(rbind(c(1:10),c(15:20)),5)
sample(features,50)
?sample_n
#pick around 50 rock and metal songs so there is no overrepresentation
r <- track_features %>% filter(genres %in% c("rock")) %>% slice_sample(50)
#pick around 50 rock and metal songs so there is no overrepresentation
r <- track_features %>% filter(genres %in% c("rock")) %>% slice_sample(n = 50)
m <- track_features %>% filter(genres %in% c("metal")) %>% slice_sample(n = 50)
sub_data <- track_features %>% filter(genres %!in% C("rock,metal"))
sub_data <- track_features %>% filter(genres  !C("rock,metal"))
sub_data <- track_features %>% filter(genres  != C("rock,metal"))
sub_data <- track_features %>% filter(genres %!in% C("rock,metal"))
sub_data <- track_features %>% filter(genres != C("rock,metal"))
sub_data <- track_features %>% filter(genres != "rock")
sub_data <- track_features %>% filter(genres != "rock") %>% filter(genres != "metal")
sub_data %>% rbind(r,m)
sub_data %>% rbind(r)
sub_data <- sub_data %>% rbind(r,m)
s_features <- subdata %>% select(-c("track.id","genres"))
s_features <- sub_data %>% select(-c("track.id","genres"))
clust1 <- s_features %>% NbClust(method = "kmeans")
clust2 <- s_features %>% NbClust(method = "complete")
cl1 <- s_features %>% NbClust(method = "kmeans",index = "ch")
cl1_ch <- s_features %>% NbClust(method = "kmeans",index = "ch")
km_ch <- s_features %>% NbClust(method = "kmeans",index = "ch")
km_sh <- s_features %>% NbClust(method = "kmeans",index = "silhouette")
h_ch <- s_features %>% NbClust(method = "complete",index = "ch")
h_sh <- s_features %>% NbClust(method = "kmeans",index = "silhouette")
db <- s_features %>% dbscan(,eps = ep, minPts = MinP)
km_ch$Best.nc
km_sh$Best.nc
km_ch <- s_features %>% NbClust(method = "kmeans")
h_ch <- s_features %>% NbClust(method = "complete")
#for dbscan epsilon and minpts have to be determined
# rule of thumb: MinPts = 2*dimension of data. This data has a lot of duplicates so we will do 3*dim
MinP <- 3*ncol(s_features)
neigh <- s_feaures %>% kNN(2)
d <- neigh$dist[,2]
ep <- 0.95*max(d)
db <- s_features %>% dbscan(,eps = ep, minPts = MinP)
#do a kmeans after filtering noise points
aux <- sub_data %>% mutate(dbs=factor(km_ch$cluster), N = c(1:nrow(sub_data))) %>% filter(dbs != 0)
km_db <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans")
aux <- aux %>% mutate(km_filter = factor(km_db$Best.partition))
neigh <- s_features %>% kNN(2)
d <- neigh$dist[,2]
ep <- 0.95*max(d)
db <- s_features %>% dbscan(,eps = ep, minPts = MinP)
#do a kmeans after filtering noise points
aux <- sub_data %>% mutate(dbs=factor(km_ch$cluster), N = c(1:nrow(sub_data))) %>% filter(dbs != 0)
km_db <- aux %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans")
km_db <- aux %>% select(-c("dbs","N")) %>% NbClust(method = "kmeans")
aux %>% select(-c("dbs","N"))
aux %>% select(-c("dbs","track.id","genres","N"))
db <- s_features %>% dbscan(,eps = ep, minPts = MinP)
#do a kmeans after filtering noise points
aux_S <- sub_data %>% mutate(dbs=factor(km_ch$cluster), N = c(1:nrow(sub_data))) %>% filter(dbs != 0)
km_db <- aux_s %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans")
#do a kmeans after filtering noise points
aux_S <- sub_data %>% mutate(dbs=factor(km_ch$cluster), N = c(1:nrow(sub_data))) %>% filter(dbs != 0)
#do a kmeans after filtering noise points
aux_S <- sub_data %>% mutate(dbs=factor(km_ch$Cluster), N = c(1:nrow(sub_data))) %>% filter(dbs != 0)
km_ch$Best.partition
#do a kmeans after filtering noise points
aux <- track_features %>% mutate(dbs=factor(clust3$cluster), N = c(1:nrow(track_features))) %>% filter(dbs != 0)
#do a kmeans after filtering noise points
aux_S <- sub_data %>% mutate(dbs=factor(db$cluster), N = c(1:nrow(sub_data))) %>% filter(dbs != 0)
km_db <- aux_s %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans")
#do a kmeans after filtering noise points
aux_S <- sub_data %>% mutate(dbs=factor(db$cluster), N = c(1:nrow(sub_data))) %>% filter(dbs != 0)
km_db <- aux_s %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans")
#do a kmeans after filtering noise points
aux_s <- sub_data %>% mutate(dbs=factor(db$cluster), N = c(1:nrow(sub_data))) %>% filter(dbs != 0)
km_db <- aux_s %>% select(-c("dbs","track.id","genres","N")) %>% NbClust(method = "kmeans")
aux_s <- aux_s %>% mutate(km_filter = factor(km_db$Best.partition))
#add the clustering results to the main data
analysis_sub1 <- sub_data %>% select(c("track.id","genres"))
analysis_sub1 <- analysis_sub1 %>% mutate(N = c(1:nrow(track_features)))
#to add the km_filter data
aux2_s <- aux_s %>% select("N","km_filter")
analysis_sub1 <- left_join(analysis_sub1,aux2_s, by = c("N"))
analysis_sub1
analysis_sub1 <- analysis_sub1 %>% mutate(N = c(1:nrow(sub_data)))
#to add the km_filter data
aux2_s <- aux_s %>% select("N","km_filter")
analysis_sub1 <- left_join(analysis_sub1,aux2_s, by = c("N"))
analysis_sub1 <- analysis_sub1 %>% select(-c("N"))
analysis_sub1 <- analysis_sub1 %>% mutate(dbs = factor(dbs$cluster),km = factor(km_ch$Best.partition),
hc = factor(h_ch$Best.partition))
analysis_sub1 <- analysis_sub1 %>% mutate(dbs = factor(db$cluster),km = factor(km_ch$Best.partition),
hc = factor(h_ch$Best.partition))
analysis_alldata <- analysis_alldata[-744,]
summary(analysis_alldata)
#Swap Nas to 0 in km_filter
a <- rep(0,ncol(analysis_sub1))
analysis_sub1 <- add_row(analysis_sub1,km_filter = "0")
analysis_sub1 <- analysis_sub1 %>% mutate(km_filter = as.factor(analysis_sub1$km_filter))
analysis_sub1$km_filter %>% replace_na(0)
analysis_sub1 <- analysis_sub1[-nrow(analysis_sub1),]
summary(analysis_sub1)
#save the file with the clusterings
save(analysis_sub1, file = "analysis_sub1.RData")
pca_f$rotation
summary(pca_f)
pca_f$x
?prcomp
summary(pca_f)
pca_f$x %>% as_tibble()
pca_f$x %>% as_tibble()
#variable analysis
source('01_setup.R')
pca_f$x %>% as_tibble()
data_pca <- pca_f$x %>% as_tibble()
data_pca70 <- data_pca %>% select(c(1:3))
#4 componenetes (>80% varianza explicada)
data_pca80 <- data_pca %>% select(c(1:4))
km_pca70 <- data_pca70 %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans")
km_pca70 <- data_pca70 %>% NbClust(method = "kmeans")
km_pca80 <- data_pca80 %>% NbClust(method = "kmeans")
track_features %>% select("track.id","genres") %>% mutate(km70 = factor(km_pca70$Best.partition),
km80 = factor(km_pca80$Best.partition))
results_pca <- track_features %>% select("track.id","genres") %>% mutate(km70 = factor(km_pca70$Best.partition),
km80 = factor(km_pca80$Best.partition))
h_pca70 <- data_pca70 %>% NbClust(method = "complete")
h_pca80 <- data_pca80 %>% NbClust(method = "complete")
results_pca <- results_pca %>% mutate(h70 = factor(h_pca70$Best.partition),
h80 = factor(h_pca80$Best.partition))
results_pca
results_pca %>% mutate(diff_km = abs(km70-km80),diff_h = abs(h70-h80))
results_pca %>% mutate(diffkm = abs(km70-km80),diffh = abs(h70-h80))
results_pca %>% mutate(diff_km = as.numeric(km70!=km80),diff_h = as.numeric(h70!=h80))
summary(results_pca)
results_pca %>% filter(km70 == 1) %>% group_by(genres) %>% count()
results_pca %>% filter(km70 == 2) %>% group_by(genres) %>% count()
results_pca %>% filter(km70 == 3) %>% group_by(genres) %>% count()
?nest
results_pca %>% nest(genres)
results_pca
summary(results_pca)
?geom_treemap
install.packages("treemapify")
library(treemapify)
#hacer treemaps
library('treemapify')
?geom_treemap
tree_test <- ggplot(data = results_pca) + geom_treemap(mapping = aes(area = results_pca$genres))
test_tree
tree_test
tree_test <- ggplot(data = results_pca) + geom_treemap(mapping = aes(area = genres))
tree_test
# track.id            genres          km70    km80    h70     h80
# Length:743         Length:743         1:312   1:118   1:381   1:706
# Class :character   Class :character   2:223   2:625   2:178   2: 37
# Mode  :character   Mode  :character   3: 77           3: 58
#                                       4: 94           4: 89
#                                       5: 37           5: 37
results_pca %>% group_by(genres)
# track.id            genres          km70    km80    h70     h80
# Length:743         Length:743         1:312   1:118   1:381   1:706
# Class :character   Class :character   2:223   2:625   2:178   2: 37
# Mode  :character   Mode  :character   3: 77           3: 58
#                                       4: 94           4: 89
#                                       5: 37           5: 37
results_pca %>% group_by(genres) %>% count()
# track.id            genres          km70    km80    h70     h80
# Length:743         Length:743         1:312   1:118   1:381   1:706
# Class :character   Class :character   2:223   2:625   2:178   2: 37
# Mode  :character   Mode  :character   3: 77           3: 58
#                                       4: 94           4: 89
#                                       5: 37           5: 37
tr_df <- results_pca %>% group_by(genres) %>% count()
tree_test <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n))
tree_test
tree_test <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n),fill = genres)
tree_test
tree_test <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n,fill = genres))
tree_test
install.packages("gg3D")
library("gg3D")
devtools::install_github("AckerDWM/gg3D")
# track.id            genres          km70    km80    h70     h80
# Length:743         Length:743         1:312   1:118   1:381   1:706
# Class :character   Class :character   2:223   2:625   2:178   2: 37
# Mode  :character   Mode  :character   3: 77           3: 58
#                                       4: 94           4: 89
#                                       5: 37           5: 37
tr_df <- results_pca %>% filter(km70==1) group_by(genres) %>% count()
# track.id            genres          km70    km80    h70     h80
# Length:743         Length:743         1:312   1:118   1:381   1:706
# Class :character   Class :character   2:223   2:625   2:178   2: 37
# Mode  :character   Mode  :character   3: 77           3: 58
#                                       4: 94           4: 89
#                                       5: 37           5: 37
tr_df <- results_pca %>% filter(km70==1) %>% group_by(genres) %>% count()
tree_test <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n,fill = genres))
tree_test
# track.id            genres          km70    km80    h70     h80
# Length:743         Length:743         1:312   1:118   1:381   1:706
# Class :character   Class :character   2:223   2:625   2:178   2: 37
# Mode  :character   Mode  :character   3: 77           3: 58
#                                       4: 94           4: 89
#                                       5: 37           5: 37
tr_df <- results_pca %>% filter(km70==1) %>% group_by(genres) %>% count()
km70_1_tree <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n,fill = genres))
tr_df <- results_pca %>% filter(km70==2) %>% group_by(genres) %>% count()
tr_df <- results_pca %>% filter(km70==2) %>% group_by(genres) %>% count()
km70_2_tree <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n,fill = genres))
tr_df <- results_pca %>% filter(km70==3) %>% group_by(genres) %>% count()
km70_3_tree <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n,fill = genres))
tr_df <- results_pca %>% filter(km70==4) %>% group_by(genres) %>% count()
km70_4_tree <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n,fill = genres))
tr_df <- results_pca %>% filter(km70==5) %>% group_by(genres) %>% count()
km70_5_tree <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n,fill = genres))
tr_df <- results_pca  %>% group_by(genres) %>% count()
data_0_tree <- ggplot(data = tr_df) + geom_treemap(mapping = aes(area = n,fill = genres))
grid.arrange(data_0_tree,km70_1_tree,km70_2_tree,km70_3_tree,km70_4_tree,km70_5_tree,ncol = 2,nrow = 3)
summary(analysis_alldata)
#dato extra para cambiar NAs a 0s
a <- rep(0,ncol(analysis_alldata))
analysis_alldata <- add_row(analysis_alldata,km_filter = "0")
analysis_alldata <- analysis_alldata %>% mutate(km_filter = as.factor(analysis_alldata$km_filter))
analysis_alldata$km_filter %>% replace_na(0)
analysis_alldata <- analysis_alldata[-nrow(analysis_alldata),]
summary(analysis_alldata)
source('01_setup.R')
load('track_features.RData')
load('tracks_genre_features.RData')
ggplot(track_features, aes(genres)) + geom_bar() + theme_bw() + geom_text(stat = 'count', aes(label = ..count.., vjust = -0.5))
ggcorr(track_features %>% select(-c('track.id','genres')))
track_features <- track_features %>% mutate(generic_genre = as.factor((genres == 'metal')+ 2*(genres == 'rock')))
levels(track_features$generic_genre) <- c('otro','metal','rock')
ggplot(track_features %>% distinct(track.id,energy, acousticness, generic_genre), aes(energy, acousticness, color = generic_genre)) + geom_point() + theme_bw()
ggplot(track_features %>% distinct(track.id,danceability, speechiness,generic_genre),aes(danceability, speechiness, color = generic_genre)) + geom_point() + theme_bw()
ggplot(track_features %>% distinct(track.id, danceability, generic_genre),aes(danceability, group = generic_genre, color = generic_genre)) + geom_density() + theme_bw()
energy_d <- ggplot(track_features %>% distinct(track.id,energy, generic_genre), aes(energy, group = generic_genre,color = generic_genre)) + geom_density() + theme_bw()
tempo_d <- ggplot(track_features %>% distinct(track.id,tempo, generic_genre), aes(tempo, group = generic_genre,color = generic_genre)) + geom_density() + theme_bw()
instru_d <- ggplot(track_features %>% distinct(track.id,instrumentalness,generic_genre),aes(instrumentalness,group = generic_genre, color = generic_genre)) + geom_density() + theme_bw()
loud_d <- ggplot(track_features %>% distinct(track.id,loudness,generic_genre),aes(loudness,group = generic_genre,color=generic_genre)) + geom_density() + theme_bw()
energy_d + tempo_d + instru_d + loud_d
ggplot(
track_features %>%
select(track.id, genres) %>%
filter(genres %in% c("rock", "metal")) %>%
mutate(is = TRUE) %>%
pivot_wider(names_from = genres, values_from = is, values_fill = FALSE) %>%
mutate(value = paste(rock, metal)),
aes(value)) +
scale_x_discrete(labels = c("rock", "metal", "ambas")) + # cambiar texto x
xlab("") + # quitar etiqueta x
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-0.5) + # poner num
theme_bw()
ggplot(
track_features %>%
select(track.id, genres) %>%
filter(genres %in% c("rock", "metal")) %>%
mutate(is = TRUE) %>%
pivot_wider(names_from = genres, values_from = is, values_fill = FALSE) %>%
mutate(value = paste(rock, metal)),
aes(value)) +
scale_x_discrete(labels = c("rock", "metal", "ambas")) + # cambiar texto x
xlab("") + # quitar etiqueta x
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-0.5) + # poner num
theme_bw()
set.seed(1)
r <- track_features %>% filter(genres %in% c('rock')) %>% slice_sample(n=50)
track_part <- track_features %>% filter(genres %!in% c('rock','metal')) %>% rbind(r)
count_genre <-  ggplot(track_part, aes(genres)) + geom_bar() + theme_bw() + geom_text(stat = 'count', aes(label = ..count.., vjust = -0.2))
corr_features <- ggcorr(track_part %>% select(-c('track.id','genres')))
count_genre + corr_features
dance_box <- ggplot(track_part %>% distinct(track.id,danceability,genres), aes(danceability,group = genres, color = genres)) + geom_boxplot() +theme_bw()
loud_box <- ggplot(track_part %>% distinct(track.id,loudness,genres), aes(loudness,group = genres, color = genres)) + geom_boxplot() +theme_bw()
acoustic_box <- ggplot(track_part %>% distinct(track.id,acousticness,genres), aes(acousticness,group = genres, color = genres)) + geom_boxplot() +theme_bw()
tempo_box <- ggplot(track_part %>% distinct(track.id,tempo,genres), aes(tempo,group = genres, color = genres)) + geom_boxplot() +theme_bw()
dance_box + loud_box + acoustic_box + tempo_box
ggplot(
track_part %>%
select(track.id, genres) %>%
filter(genres %in% c("edm", "house")) %>%
mutate(is = TRUE) %>%
pivot_wider(names_from = genres, values_from = is, values_fill = FALSE) %>%
mutate(value = paste(edm, house)),
aes(value)) +
scale_x_discrete(labels = c("edm", "house", "ambas")) + # cambiar texto x
xlab("") + # quitar etiqueta x
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-0.5) + # poner num
theme_bw()
track_part_final <- track_part %>% filter(genres %!in% c("house"))
den1 <- ggplot(track_part_final) + geom_density(aes(loudness), color = 'green') + geom_density(aes(speechiness), color = 'orange') + geom_density(aes(liveness), color = 'purple') + geom_density(aes(tempo), color = 'darkslateblue') + xlab('feature')
den2 <- ggplot(track_part_final) + geom_density(aes(instrumentalness), color = 'cyan') + geom_density(aes(valence), color = 'chocolate') + geom_density(aes(acousticness),color = 'pink') + geom_density(aes(danceability), color = 'darkmagenta') + geom_density(aes(energy), color = 'red') + xlab('feature')
den1+den2
load('key_mode.RData')
track_part_final <- track_part_final %>% left_join(key_mode)
track_part_final <- track_part_final %>% mutate(mode = as.factor(mode))
levels(track_part_final$mode) <- c("Menor", "Mayor")
ggplot(track_part_final %>%
distinct(track.id, key, mode), aes(as.factor(key), fill = factor(mode))) +
geom_bar(position = "dodge") +
labs(x = "Key", fill = "Mode") + scale_fill_brewer(palette = "Dark2") +
# hay más paletas aquí https://r-graph-gallery.com/38-rcolorbrewers-palettes.html
scale_x_discrete(labels = c("Do",
"Do#/Reb",
"Re",
"Re#/Mib",
"Mi",
"Fa",
"Fa#/Solb",
"Sol",
"Sol#/Lab",
"La",
"La#/Sib",
"Si")) +
theme_bw()
track_part_final$genres
names(track_part_final$genres)
track_part_final <- track_part %>% filter(genres %!in% c("house"))
#GUARDO LA PARTICION FINAL
save(track_part_final, file "track_part_final.RData")
track_part_final <- track_part %>% filter(genres %!in% c("house"))
#GUARDO LA PARTICION FINAL
save(track_part_final, file = "track_part_final.RData")
den1 <- ggplot(track_part_final) + geom_density(aes(loudness), color = 'green') + geom_density(aes(speechiness), color = 'orange') + geom_density(aes(liveness), color = 'purple') + geom_density(aes(tempo), color = 'darkslateblue') + xlab('feature')
den2 <- ggplot(track_part_final) + geom_density(aes(instrumentalness), color = 'cyan') + geom_density(aes(valence), color = 'chocolate') + geom_density(aes(acousticness),color = 'pink') + geom_density(aes(danceability), color = 'darkmagenta') + geom_density(aes(energy), color = 'red') + xlab('feature')
den1+den2
CH <- track_part_final %>% select(-c("track.id","genres")) %>% NbClust(index = "CH")
CH <- track_part_final %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans",index = "CH")
CH <- track_part_final %>% select(-c("track.id","genres")) %>% NbClust(method = "kmeans",index = "ch")
summary(track_part_final)
key_mode
summary(key_mode)
track_part_final <- track_part_final %>% mutate(mode = as.numeric(key_mode$mode))
track_part_final <- track_part_final %>% left_join(key_mode, by = c("track.id","genres"))
track_part_final <- track_part_final %>% mutate(mode = as.numeric(key_mode$mode))
track_part_final <- track_part_final %>% left_join(key_mode, by = c("track.id","genres"))
track_part_final <- track_part_final %>% mutate(mode = as.numeric(mode))
track_part_final
track_part_final <- track_part_final %>% left_join(key_mode, by = c("track.id","genres"))
track_part_final <- track_part_final %>% mutate(key = as.numeric(key)/11)
load(track_part_final)
track_part_final <- track_part_final %>% left_join(key_mode, by = c("track.id","genres"))
track_part_final <- track_part_final %>% mutate(key = key/11)
?left_join
source('01_setup.R')
load('track_features.RData')
load('tracks_genre_features.RData')
ggplot(track_features, aes(genres)) + geom_bar() + theme_bw() + geom_text(stat = 'count', aes(label = ..count.., vjust = -0.5))
ggcorr(track_features %>% select(-c('track.id','genres')))
track_features <- track_features %>% mutate(generic_genre = as.factor((genres == 'metal')+ 2*(genres == 'rock')))
levels(track_features$generic_genre) <- c('otro','metal','rock')
ggplot(track_features %>% distinct(track.id,energy, acousticness, generic_genre), aes(energy, acousticness, color = generic_genre)) + geom_point() + theme_bw()
ggplot(track_features %>% distinct(track.id,danceability, speechiness,generic_genre),aes(danceability, speechiness, color = generic_genre)) + geom_point() + theme_bw()
ggplot(track_features %>% distinct(track.id, danceability, generic_genre),aes(danceability, group = generic_genre, color = generic_genre)) + geom_density() + theme_bw()
energy_d <- ggplot(track_features %>% distinct(track.id,energy, generic_genre), aes(energy, group = generic_genre,color = generic_genre)) + geom_density() + theme_bw()
tempo_d <- ggplot(track_features %>% distinct(track.id,tempo, generic_genre), aes(tempo, group = generic_genre,color = generic_genre)) + geom_density() + theme_bw()
instru_d <- ggplot(track_features %>% distinct(track.id,instrumentalness,generic_genre),aes(instrumentalness,group = generic_genre, color = generic_genre)) + geom_density() + theme_bw()
loud_d <- ggplot(track_features %>% distinct(track.id,loudness,generic_genre),aes(loudness,group = generic_genre,color=generic_genre)) + geom_density() + theme_bw()
energy_d + tempo_d + instru_d + loud_d
ggplot(
track_features %>%
select(track.id, genres) %>%
filter(genres %in% c("rock", "metal")) %>%
mutate(is = TRUE) %>%
pivot_wider(names_from = genres, values_from = is, values_fill = FALSE) %>%
mutate(value = paste(rock, metal)),
aes(value)) +
scale_x_discrete(labels = c("rock", "metal", "ambas")) + # cambiar texto x
xlab("") + # quitar etiqueta x
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-0.5) + # poner num
theme_bw()
set.seed(1)
r <- track_features %>% filter(genres %in% c('rock')) %>% slice_sample(n=50)
track_part <- track_features %>% filter(genres %!in% c('rock','metal')) %>% rbind(r)
count_genre <-  ggplot(track_part, aes(genres)) + geom_bar() + theme_bw() + geom_text(stat = 'count', aes(label = ..count.., vjust = -0.2))
corr_features <- ggcorr(track_part %>% select(-c('track.id','genres')))
count_genre + corr_features
dance_box <- ggplot(track_part %>% distinct(track.id,danceability,genres), aes(danceability,group = genres, color = genres)) + geom_boxplot() +theme_bw()
loud_box <- ggplot(track_part %>% distinct(track.id,loudness,genres), aes(loudness,group = genres, color = genres)) + geom_boxplot() +theme_bw()
acoustic_box <- ggplot(track_part %>% distinct(track.id,acousticness,genres), aes(acousticness,group = genres, color = genres)) + geom_boxplot() +theme_bw()
tempo_box <- ggplot(track_part %>% distinct(track.id,tempo,genres), aes(tempo,group = genres, color = genres)) + geom_boxplot() +theme_bw()
dance_box + loud_box + acoustic_box + tempo_box
ggplot(
track_part %>%
select(track.id, genres) %>%
filter(genres %in% c("edm", "house")) %>%
mutate(is = TRUE) %>%
pivot_wider(names_from = genres, values_from = is, values_fill = FALSE) %>%
mutate(value = paste(edm, house)),
aes(value)) +
scale_x_discrete(labels = c("edm", "house", "ambas")) + # cambiar texto x
xlab("") + # quitar etiqueta x
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-0.5) + # poner num
theme_bw()
track_part_final <- track_part %>% filter(genres %!in% c("house"))
#GUARDO LA PARTICION FINAL
save(track_part_final, file = "track_part_final.RData")
den1 <- ggplot(track_part_final) + geom_density(aes(loudness), color = 'green') + geom_density(aes(speechiness), color = 'orange') + geom_density(aes(liveness), color = 'purple') + geom_density(aes(tempo), color = 'darkslateblue') + xlab('feature')
den2 <- ggplot(track_part_final) + geom_density(aes(instrumentalness), color = 'cyan') + geom_density(aes(valence), color = 'chocolate') + geom_density(aes(acousticness),color = 'pink') + geom_density(aes(danceability), color = 'darkmagenta') + geom_density(aes(energy), color = 'red') + xlab('feature')
den1+den2
load('key_mode.RData')
track_part_final <- track_part_final %>% left_join(key_mode)
track_part_final <- track_part_final %>% mutate(mode = as.factor(mode))
levels(track_part_final$mode) <- c("Menor", "Mayor")
ggplot(track_part_final %>%
distinct(track.id, key, mode), aes(as.factor(key), fill = factor(mode))) +
geom_bar(position = "dodge") +
labs(x = "Key", fill = "Mode") + scale_fill_brewer(palette = "Dark2") +
# hay más paletas aquí https://r-graph-gallery.com/38-rcolorbrewers-palettes.html
scale_x_discrete(labels = c("Do",
"Do#/Reb",
"Re",
"Re#/Mib",
"Mi",
"Fa",
"Fa#/Solb",
"Sol",
"Sol#/Lab",
"La",
"La#/Sib",
"Si")) +
theme_bw()
track_part_final <- track_part_final %>% left_join(key_mode, by = c("track.id","genres"))
track_part_final <- track_part_final %>% mutate(key = key/11)
track_part_final <- track_part_final %>% select(-c("key.x","key.y","mode.x","mode.y"))
track_part_final <- track_part_final %>% left_join(key_mode, by = c("track.id","genres"))
track_part_final <- track_part_final %>% mutate(key = key/11)
save(track_part_final, file = "track_part_final.RData")
